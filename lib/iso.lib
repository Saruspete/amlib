# vim: ft=sh ts=4

if ! [[ "${FUNCNAME[1]}" = ammLib::Load* ]]; then
	echo >&2 "You must not source this library ($BASH_SOURCE): Use function ammLib::Load"
	exit 1
fi

# -----------------------------------------------------------------------------
# AMM Lib meta stubs
# -----------------------------------------------------------------------------

function ammIso::MetaCheck {
	ammLib::Require string
}
function ammIso::MetaInit {
	ammLib::Require string
}

typeset -gA __ammIsoBootloaderConfig=()
typeset -ga __ammIsoBootloaderEntries=()
typeset -g  __ammIsoBootloaderEntriesAppend=""
typeset -gA __ammIsoBootloaderConfigAvail=(
	[menu_clear]="Clear the screen when exiting the menu"
	[menu_title]=""
	[menu_background]=""
	[menu_vshift]=""
	[menu_rows]=""
	[menu_margin]=""
	[menu_helpmsgrow]=""
	[menu_tabmsgrow]=""
	[menu_color_border]="Border Area"
	[menu_color_sel]="Selected item"
	[menu_color_unsel]="Unselected menu item"
	[menu_color_title]="Title bar"
	[menu_color_tabmsg]="Press [Tab] message"
	[menu_color_hotsel]="Selected hotkey"
	[menu_color_hotkey]="Unselected hotkey"
	[menu_color_help]="Help text"
	[menu_color_scrollbar]="A scrollbar of some type? Not sure."
	[menu_color_timeout]=""
	[menu_color_timeout_msg]=""
	[menu_color_cmdmark]=""
	[menu_color_cmdline]=""
	[menu_tabmsg]=""
)
# -----------------------------------------------------------------------------
# Manipulation of ISO files
# -----------------------------------------------------------------------------

function ammIso::ExtractIsoinfo {
	:
}


function ammIso::Extract {
	typeset iso="$1"
	typeset dstdir="${2:-$__AMMLIB_DATATMP/iso}"
	shift 2


	# We have multiple extract solutions available
	# - mount -o loop : need root
	# - FuseISO :  fuse.iso
	# - isoinfo :  isoinfo
	# - udisk2  :  udiskctl
	# - xorriso :
	# - 7z      :  7z x
	# - rar     :
	# - bsdtar  :

	# Try to use mount
	if [[ $__AMMLIB_USERID -eq 0 ]]; then
		ammLog::Inf "Bind-mounting '${iso##*/}' and copying to '$dstdir'"
		# TODO: migrate this to a temp ammlib helper
		typeset tmpmnt="$__AMMLIB_DATATMP/loop.${iso##*/}"
		mkdir -p "$tmpmnt"
		if mount -o loop "$iso" "$tmpmnt"; then
			# A selection has been made ?
			if [[ -n "$@" ]]; then
				ammPath::CopyStructure "$tmpmnt" "$dstdir" "$@"
			else
				cp -a "$tmpmnt/" "$dstdir"
			fi
			if ! umount "$tmpmnt"; then
				ammLog::Wrn "Error while unmounting '$tmpmnt'. Check once script is finished"
			fi
		else
			ammLog::Wrn "Cannot bindmount. Trying other tools"
		fi
	fi

	typeset logmsg="Extracting '${iso##*/}' to '$dstdir' using"
	if ammExec::Exists "7z"; then
		ammLog::Inf "$logmsg 7z"
		\7z x "$iso" -o"$dstdir"
		return $?
	fi

	if ammExec::Exists "isoinfo"; then
		ammLog::Inf "$logmsg isoinfo"
		typeset isoinfovers="$(\isoinfo -version)"
		if [[ $isoinfovers =~ isoinfo\ 3.+ ]]; then
			\isoinfo -i "$iso" -X "$dstdir"
		else
			typeset fpath=""
			while read fpath; do
				# Files are under format "PATH;1", folders are "PATH"
				if [[ "$fpath" != "${fpath%;*}" ]]; then
					fpath="${fpath%;*}"
					typeset fdir="$dstdir/${fpath%/*}"
					# Create folder if not existing
					[[ -d "$fdir" ]] || mkdir -p "$fdir"
					# Extract file
					\isoinfo -x "$fpath" -i "$iso" > "$dstdir/$fpath"
				fi

			done < <(\isoinfo -f -i "$iso")
		fi
		return $?
	fi

	if ammExec::Exists "xoriso"; then
		ammLog::Inf "$logmsg xoriso"
		\xorriso -osirrox on -indev "$iso" -extract / "$dstdir"
		return $?
	fi

	ammLog::Wrn "Unable to find any tool to extract iso"
	return 1
}


function ammIso::Create {
	typeset srcdir="$1"
	typeset dstiso="${2:-${srcdir#/}.iso}"
	typeset volumeid="${3:-myiso}"
	typeset bootloaderbios="${4:-}"
	typeset bootloaderuefi="${5:-}"

	#bootloaderbios="isolinux/isolinux.bin"
	#bootloaderusef="images/efiboot.img"

	# TODO: Validate volume name
	

	(
		cd "$srcdir"
		typeset MKISOFS_OPTS=""

		if [[ -n "$bootloaderbios" ]]; then
			MKISOFS_OPTS+=" -eltorito-catalog isolinux/boot.cat"
			# Boot MBR
			MKISOFS_OPTS+=" -eltorito-boot $bootloaderbios -no-emul-boot"
			# Load size 4 = 4*512 = 1 CDRom block (default for BIOS too)
			MKISOFS_OPTS+=" -boot-load-size 4 -boot-info-table"
		fi

		if [[ -n "$bootloaderuefi" ]]; then
			# The Alt-boot will create a new eltorito section
			MKISOFS_OPTS+=" -eltorito-alt-boot -efi-boot $bootloaderuefi -no-emul-boot"
			MKISOFS_OPTS+=" -boot-load-size 4 -boot-info-table "
		fi

		# Format
		MKISOFS_OPTS+=" -J -rock -volid $volumeid"

		mkisofs $MKISOFS_OPTS -verbose -output "$dstiso" .
	)

	# Make the ISO bootable from USB too
	if [[ -n "$bootloaderbios" ]]; then
		typeset isohybrid_opts=""
		[[ -n "$bootloaderuefi" ]] && isohybrid_opts+=" --uefi"
		isohybrid $isohybrid_opts "$dstiso"
	fi

}

