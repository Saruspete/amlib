# vim: ft=sh ts=4

if ! [[ "${FUNCNAME[1]}" = ammLib::Load* ]]; then
	echo >&2 "You must not source this library ($BASH_SOURCE): Use function ammLib::Load"
	exit 1
fi

# -----------------------------------------------------------------------------
# AMM Lib meta stubs
# -----------------------------------------------------------------------------

function ammFs::MetaInit {
#	ammExec::Require awk

	typeset -gA __AMMFS_MOUNT2STORE_CACHE
	typeset -gA __AMMFS_MOUNT2OPTS_CACHE
	typeset -gA __AMMFS_MOUNT2TYPE_CACHE
	typeset -gA __AMMFS_STORE2MOUNT_CACHE
	typeset -gA __AMMFS_ABS2STORE_CACHE
	typeset -g  __AMMFS_CACHED=false

}

# -----------------------------------------------------------------------------
# Speedup seeking
# -----------------------------------------------------------------------------

function ammFs::_ParseMounts {

	typeset src mnt typ opts i1 i2 _junk
	while read src mnt typ opts i1 i2 _junk; do
		__AMMFS_MOUNT2STORE_CACHE[$mnt]="$src"
		__AMMFS_MOUNT2OPTS_CACHE[$mnt]="$opts"
		__AMMFS_MOUNT2TYPE_CACHE[$mnt]="$typ"
		__AMMFS_STORE2MOUNT_CACHE[$src]="$mnt"

		# Absolute path for the device
		if [[ -b "$src" ]]; then
			typeset abs="$(readlink -f "$src")"
			__AMMFS_ABS2STORE_CACHE[$abs]="$src"
		fi
	done < /proc/self/mounts

	__AMMFS_CACHED=true
}

# -----------------------------------------------------------------------------
# Filesystem mount management
# -----------------------------------------------------------------------------

function ammFs::Mounted {
	typeset mntdst="$1"
	typeset mntsrc="${2:-}"
	typeset mnttype="${3:-}"
	typeset mntopts="${4:-}"

	typeset mntdstabs="$(readlink -f $mntdst)"

	# Scan currently mounted elements
	typeset src mnt typ opts i1 i2 _junk
	while read src mnt typ opts i1 i2 _junk; do
		if [[ -n "$_junk" ]]; then
			ammLog::Wrn "Found junk value while reading /proc/mounts: '$_junk'"
		fi

		# Check if destination path is mounted
		if [[ "$mnt" == "$mntdstabs" ]]; then
			typeset r=0
			if [[ -n "$mntsrc" ]] && [[ "$src" != "$mntsrc" ]]; then
				ammLog::Wrn "Mnt '$mntdst' mounted with src '$src' instead of '$mntsrc'"
				r+=1
			fi
			if [[ -n "$mnttype" ]] && [[ "$typ" != "$mnttype" ]]; then
				ammLog::Wrn "Mnt '$mntdst' mounted with type '$typ' instead of '$mnttype'"
				r+=1
			fi
			if [[ -n "$mntopts" ]] && [[ "$opts" != "$mntopts" ]]; then
				ammLog::Wrn "Mnt '$mntdst' mounted with opts '$opts' instead of '$mntopts'"
				r+=1
			fi

			return $r
		fi
	done < /proc/mounts

	return 1
}

function ammFs::Mount {
	typeset mntsrc="$2"
	typeset mntdst="$3"
	typeset mntopts="${4:-}"

	typeset mnttype=""

	# If source is a folder, use bindmount
	if [[ -d "$mntsrc" ]]; then
		mnttype+="-t none"
		mntopts+="-o bind"
	fi

	# Mount the target
	if ! [[ -d "$mntdst" ]]; then
		ammLog::Inf "Target mount '$mntdst' does not exists. Creating"
		mkdir -p "$mntdst"
	fi

	if ammFs::Mounted "$mntdst"; then
		ammLog::Inf "Mountpoint '$mntdst' already mounted"
		return 0
	fi

	# Do the mount
	mount $mnttype $mntopts "$mntsrc" "$mntdst"

	# And invalidate the cache
	__AMMFS_CACHED=false
}

# -----------------------------------------------------------------------------
# Filesystem Query
# -----------------------------------------------------------------------------

function ammFs::TypeFromMountpoint {
	typeset mnt="$1"

	mnt="$(readlink -f "$mnt")"

	$__AMMFS_CACHED || ammFs::_ParseMounts
	if ( set +u; [[ -n "${__AMMFS_MOUNT2TYPE_CACHE[$mnt]}" ]] ); then
		echo "${__AMMFS_MOUNT2TYPE_CACHE[$mnt]}"
		return 0
	fi

	# Try refreshing the cache maybe
	ammFs::_ParseMounts
	if ( set +u; [[ -n "${__AMMFS_MOUNT2TYPE_CACHE[$mnt]}" ]] ); then
		echo "${__AMMFS_MOUNT2TYPE_CACHE[$mnt]}"
		return 0
	fi

	ammLog::Wrn "Requested type of non-existing mountpoint: '$mnt'"
	return 1
}

# @description  Get FS type from block device
# @Ã¦rg $1  path to Block Device
function ammFs::TypeFromBlockdev {
	typeset blockdev="$1"

	if ! [[ -b "$blockdev" ]]; then
		ammLog::Err "Path '$blockdev' is not a blockdevice"
		return  1
	fi

	typeset mnt="" typ="" dev="$blockdev" abs="$(readlink -f $blockdev)"

	$__AMMFS_CACHED || ammFs::_ParseMounts

	# Check for store-name from absolute path (aliases, /dev/mapper/vg-lv or /dev/vg/lv, /dev/mdxx)
	if (set +u; [[ -n "${__AMMFS_ABS2STORE_CACHE[$abs]}" ]] ); then
		dev="${__AMMFS_ABS2STORE_CACHE[$abs]}"
	fi

	# If mounted, easy:
	if (set +u; [[ -n "${__AMMFS_STORE2MOUNT_CACHE[$dev]}" ]] ); then
		mnt="${__AMMFS_STORE2MOUNT[$dev]}"
		typ="${__AMMFS_MOUNT2TYPE[$mnt]}"
		if [[ -n "$typ" ]]; then
			echo "$typ"
			return
		fi
	fi

	# Not mounted, gotta guess or call helpers
	# if udev, some info exported in /run/udev/data/b{maj}:{min}
	typeset sysdev="/sys/class/block/${dev##*/}"
	if [[ -d "/run/udev/data" ]] && [[ -r "$sysdev/dev" ]]; then
		typeset majmin="$(cat "$sysdev/dev" 2>/dev/null)"
		typeset udevfile="/run/udev/data/b${majmin}"
		if [[ -r "$udevfile" ]]; then
			typtmp="$(grep '^E:ID_FS_TYPE=' "$udevfile")"
			typtmp="${typtmp#*=}"
			[[ -n "$typtmp" ]] && echo "$typtmp" && return
		fi
	fi

	# Other tools require root access: fsadm, dd, fsck...
	# TODO
	return 1
}



function ammFs::MountpointFromFile {
	typeset file="$1"

	file="$(readlink -f "$file")"

	$__AMMFS_CACHED || ammFs::_ParseMounts

	typeset path
	for path in $(ammPath::Decompose "$file"); do
		if (set +u; [[ -n "${__AMMFS_MOUNT2TYPE_CACHE[$path]}" ]]); then
			echo "${__AMMFS_MOUNT2TYPE_CACHE[$path]}"
			return 0
		fi
	done

	# Still there and no fs found ?! Fallback to standard df & tail
	typeset mnt="$(df -hP "$file" 2>/dev/null|tail -n1)"
	mnt="${mnt##*% }"

	if (set +u; [[ -z "${__AMMFS_MOUNT2TYPE_CACHE[$mnt]}" ]] ); then
		ammLog::Wrn "Stall cache (Missing entry '$mnt')"
		ammFs::_ParseMounts
	fi

	echo "$mnt"
}
# -----------------------------------------------------------------------------
# Filesystem creation
# -----------------------------------------------------------------------------

# @description  Create a new filesystem
# 
