# vim: ft=sh ts=4

if ! [[ "${FUNCNAME[1]}" = ammLibLoad* ]]; then
	echo >&2 "You must not source this library ($BASH_SOURCE): Use function ammLibLoad"
	exit 1
fi

# -----------------------------------------------------------------------------
# Meta init
# -----------------------------------------------------------------------------

#typeset -g AMMPKGYUM_AVAIL_

# Some tools are required for this module to work
function ammPkgYumMetaInit {
	ammLibRequire pkg.rpm string
	ammExecRequires cksum gzip awk

	#ammExecRequires "repoquery"
}

function ammPkgYumIsAvailable {
	typeset rootpath="${1:-}"

	[[ -x "$rootpath/usr/bin/yum" ]]
}

# -----------------------------------------------------------------------------
# Standard operations
# -----------------------------------------------------------------------------

# @description  (private) proxy for rpm executable
#
# @arg $1  (string) Action for RPM to exec
function _ammPkgYum {
	typeset act="$1"; shift

	typeset opts=""
	$__AMMLIB_INTERACTIVE || opts+="-y"

	# Check if input contains options
	while [[ -n "${1:-}" ]]; do
		if ammStringIsOption "$1"; then
			opts+=" $1"
			shift
		else
			break
		fi
	done

	ammLogDbg "Executing yum with args: $act $opts $@"
	yum $act $opts "$@"
}

function _ammPkgYumRepoquery {

	ammExecExists "repoquery" >/dev/null || return 1

	typeset opts=""

	# Check if input contains options
	while [[ -n "${1:-}" ]]; do
		if ammStringIsOption "$1"; then
			opts+=" $1"
			shift
		else
			break
		fi
	done

	ammLogDbg "Executing repoquery with args: $opts $@"
	repoquery $opts "$@" 2>/dev/null
}

function ammPkgYumInstall {
	# TODO: Make more checks for "upgrade" or "downgrade" if version provided
	_ammPkgYum "install" "$@"
}

function ammPkgYumRemove {
	_ammPkgYum "remove" "$@"
}

function ammPkgYumSearch {
	_ammPkgYum "info" "$@"
}


function ammPkgYumInfoRequiredBy {
	_ammPkgYum "deplist" "$@" | awk '
		$1 == "package:" { printf "\n"$2; }
		$1 == "provider:" { printf " $2"; }
	'
}

function ammPkgYumInfoWhatProvides {

	# Check for all input
	typeset element
	for element in "$@"; do
		# If it's a file already installed, use rpm (faster)
		if [[ -e "$element" ]]; then
			ammPkgRpmInfoWhatProvides "$element"

		# Else, query all repordata
		else
			# If repoquery is available, use it
			if ammExecExists repoquery >/dev/null; then
				_ammPkgYumRepoquery --queryformat="%{name}.%{arch}" --whatprovides "$element"

			# Else, fallback to yum + parsing
			else
				typeset key val pkg=""
				_ammPkgYum "provides" "$element" 2>/dev/null | while IFS=: read key val; do
					key="$(ammStringTrim "$key")"
					val="$(ammStringTrim "$val")"

					# if we are within a finding block, print the package and reset it to avoid double print
					if [[ "$key" == "Filename" ]]; then
						if [[ -n "$pkg" ]]; then
							echo $pkg
							pkg=""
						fi

					# pkg is only empty after a Filename key, or at start
					else
						[[ -z "$pkg" ]] && pkg="$key"
					fi

				done
			fi
		fi
	done
}

function ammPkgYumInfoContents {
	# Check for all input
	for pkg in "$@"; do
		# For each pkg, list content
		_ammPkgYumRepoquery "--provides" "$pkg"
	done
}

# What versions are available for a package
function ammPkgYumInfoVersions {
	typeset pkg="$1"
	_ammPkgYum info $pkg
}


# -----------------------------------------------------------------------------
# Data extraction
# -----------------------------------------------------------------------------

# @description  Download an archive from configured yum repositories and all dependencies
#
# @arg $1  (path)     Path where to download the packages (will be created if does not exists)
# @arg $@  (string[]) Packages to download
#
# @stdout  (path[]) List of archives downloaded
function ammPkgYumDownloadRecursive {
	typeset outdir="$1"; shift

	[[ -d "$outdir" ]] || mkdir -p "$outdir"

	ammLogDbg "Downloading into '$outdir' packages: $@"

	typeset tag pkg _junk
	typeset -i ret=1

	# TODO: dnf handles repotrack and yumdownloader with dnf-utils
	# Messages: 
	# [SKIPPED] bash-4.4.23-6.fc29.x86_64.rpm: Already downloaded
	# (6/16): fedora-gpg-keys-29-5.noarch.rpm       1.3 MB/s | 102 kB     00:00
	if ammExecExists repotrack >/dev/null; then
		typeset opts="--download_path='$outdir'"
		# For dnf, download_path does not exists. Use destdir, like yumdownloader
		[[ "$(readlink -f $(type -P repotrack))" == "/usr/libexec/dnf-utils" ]] && opts="--destdir='$outdir'"

		repotrack $opts "$@" 2>/dev/null | while read tag pkg _junk; do
			tag="${tag%:}"
			pkg="${pkg%:}"

			# Message: Downloading info-5.1-5.el7.x86_64.rpm
			if [[ "$tag" == "Downloading" ]]; then
				echo "$outdir/$pkg"

			# Message: rpm.todel/htop-2.2.0-3.el7.x86_64.rpm already exists and appears to be complete
			elif [[ -e "$tag" ]]; then
				echo "$tag"

			#  dnf output
			elif [[ -f "$outdir/$pkg" ]]; then
				echo "$outdir/$pkg"
			fi

		done
	else
		ammLogErr "Unable to find repotrack"
		return 1
	fi

	return 0
}
# @description  Download an archive from configured yum repositories
#
# @arg $1  (path)     Path where to download the packages (will be created if does not exists)
# @arg $@  (string[]) Packages to download
#
# @stdout  (path[]) List of archives downloaded
function ammPkgYumDownload {
	typeset outdir="$1"; shift

	[[ -d "$outdir" ]] || mkdir -p "$outdir"

	ammLogDbg "Downloading into '$outdir' packages: $@"

	typeset tag pkg _junk
	typeset -i ret=1

	# TODO: dnf handles repotrack and yumdownloader with dnf-utils
	# Messages: 
	# [SKIPPED] bash-4.4.23-6.fc29.x86_64.rpm: Already downloaded
	# (6/16): fedora-gpg-keys-29-5.noarch.rpm       1.3 MB/s | 102 kB     00:00
	if ammExecExists yumdownloader >/dev/null; then

		# TODO: does not work as is
		yumdownloader --destdir "$outdir" "$@" 2>/dev/null | while read tag pkg _junk; do
			# Message: ---> Package htop.x86_64 0:2.2.0-3.el7 will be installed
			echo "$outdir/${pkg%:}"
		done

	# Fallback to std yum
	else
		_ammPkgYum --downloadonly --downloaddir="$outdir" 2>/dev/null
	fi
}

# @description  Extract one or more packages into provided path
#
# @arg $1  (path)     Where to extract the archives
# @arg $@  (string[]) Archives or package names to be extracted
function ammPkgYumExtract {
	typeset dst="$1"; shift

	ammLogDbg "Extracting into '$dst' packages: $@"

	typeset pkgs="" pkgname pkgfile file
	for pkgfile in "$@"; do
		# if it's a file, just extract it from rpm
		if [[ -e "$pkgfile" ]]; then
			#pkgname="$(ammPkgRpmInfo "$pkgfile")"
			:

		# The file does not exists, download it
		else
			pkgname="$pkgfile"
			pkgfile="$(ammPkgYumDownload "$__AMMLIB_DATA/pkgRpm/Packages" "$pkgname")"

			if [[ -z "$pkgfile" ]]; then
				ammLogErr "Unable to download package '$pkgname'. Out: '$pkgfile'"
				continue
			fi

		fi

		# extract the package (maybe multiple due to dependencies)
		for file in $pkgfile; do
			ammPkgRpmExtract "$dst" "$file"
		done
	done

}

function ammPkgYumExtractRecursive {
	:
}

# -----------------------------------------------------------------------------
# Yum emulation
# -----------------------------------------------------------------------------

function _ammPkgYumRepodataCache {
	typeset cks="$(echo "$1"|cksum)"; cks="${cks// /_}"
	typeset t="$__AMMLIB_DATATMP/pkgyum.repodata.$cks"

	mkdir -p "$t"
	echo "$t"
}

# Basic yum emulation
function ammPkgYumRepodataGet {
	typeset url="$1"

	# We need http tools for this
	if ! ammLibLoad http ; then
		ammLogErr "Unable to load http library."
		return 99
	fi

	# Download the file listing
	typeset cache="$(_ammPkgYumRepodataCache "$url")"
	typeset repomd="$cache/repomd.xml"
	ammHttpFetch "$url/repodata/repomd.xml" "$repomd"

	# Download each xml file
	typeset xmls="$(grep 'location href=' "$repomd"|grep -o '".*\.xml.gz"' | tr -d '"')"
	for xml in $xmls; do
		typeset dstfile="$cache/${xml##*/}"

		# Skip if cache already here
		[[ -s "$dstfile" ]] && continue

		ammHttpFetch "$url/$xml" "$dstfile"

		# Check and unzip
		[[ -e "$dstfile" ]] && gzip -kdf "$dstfile"
	done

	# echo output
	echo "$cache"
}

function _ammPkgYumRepodataParseFilelist {
	typeset repodata="$1"; shift

	# Parse all search
	for dep in "$@"; do

		# This is utterly ugly, and a really bad idea (parsing xml in awk...)
		# but it's the easiest available for quick an portable solution

		awk -v search="$dep" '
		# Check what are we looking for (file, package...)
		BEGIN {
			searchFile = searchName = 0
			# File search always contains /
			if (index(search, "/"))
				searchFile = 1
			else
				searchName = 1
		}

		$1 =="<package" || $1 == "<version" {
			# Check for format in multiline xml...
			if (! $NF ~ />$/) {
				# WARNING !
			}
			# remove last > (or />)
			gsub(/\/?>$/,"",$NF)

			# Package opening is for a new package. Reset old vals
			if ($1 == "<package")
				pkgname = pkgvers = pkgrel = pkgarch = ""

			for (i=2; i<=NF; i++) {
				split($i,a,"=")
				lkey = a[1]
				lval = a[2]

				# remove extra "
				gsub(/"/,"",lval)

				# Name marks a new package
				if (lkey == "name") pkgname = lval
				if (lkey == "arch") pkgarch = lval
				if (lkey == "ver")  pkgvers = lval
				if (lkey == "rel")  pkgrel  = lval
			}

			# Search against pkg name. Now we have version and can print
			if (searchName && $1 == "<version" && pkgname == search) {
				print pkgname"-"pkgvers"-"pkgrel"."pkgarch".rpm"
			}
		}
		# Search against file provided.
		searchFile && match($1, /<file>(.+)<\/file>/, b) {
			# maybe try to change the glob to regex in "search" input
			if (b[1] ~ search) {
				print pkgname"-"pkgvers"-"pkgrel"."pkgarch".rpm"
			}
		}
		' $repodata/*-filelists.xml
	done
}

# Emulate the "yum provides" feature
function ammPkgYumRepodataWhatProvides {
	typeset url="$1"; shift
	typeset pkgs=""

	typeset repodata="$(ammPkgYumRepodataGet "$url")"

	_ammPkgYumRepodataParseFilelist "$repodata" "$@" | sort | uniq
}
