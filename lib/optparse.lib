# vim: ft=sh ts=4

if ! [[ "${FUNCNAME[1]}" = ammLib::Load* ]]; then
	echo >&2 "You must not source this library ($BASH_SOURCE): Use function ammLib::Load"
	exit 1
fi


# -----------------------------------------------------------------------------
# AMM Lib meta stubs
# -----------------------------------------------------------------------------

function ammOptparse::MetaCheck {
	ammExec::Require awk
}

function ammOptparse::MetaInit {
	ammOptparse::AddOpt "-h|--help" "Show this help"
	#ammoptparse::AddOpt "--version" "Show script version" "unknown"
}

# -----------------------------------------------------------------------------
# Options processing initialization
# -----------------------------------------------------------------------------

typeset -ga  _AMMOPTPARSE_ORDER
typeset -ga  _AMMOPTPARSE_DESCRIPTIONGROUP

# Mapping Option => ID
typeset -gA  _AMMOPTPARSE_OPTLONG
typeset -gA  _AMMOPTPARSE_OPTSHORT
# Raw options
typeset -gA  _AMMOPTPARSE_OPTALL
# Special words
typeset -gA  _AMMOPTPARSE_WORDS

# Options value, description and backtrace
typeset -gA  _AMMOPTPARSE_VALUE
typeset -gA  _AMMOPTPARSE_DESCRIPTION
typeset -gA  _AMMOPTPARSE_REGISTRANTS

# Callbacks for validation and expected type (and number)
typeset -gA  _AMMOPTPARSE_VALIDATOR
typeset -gA  _AMMOPTPARSE_VALTYPE

typeset -g   _AMMOPTPARSE_ARRSEP='§§'

function _ammOptparse::OptClean {
	typeset opt="$1"

	# Remove leading -
	opt="${opt#-}"
	opt="${opt#-}"

	# Remove training non-var elements
	opt="${opt%%[^a-zA-Z0-9_\-\./]*}"

	echo "$opt"
}

function _ammOptparse::OptToId {
	typeset opt="$1"

	typeset id=""

	opt="$(_ammOptparse::OptClean "$opt")"

	# Long option
	if [[ "${opt:0:2}" == "--" ]] || [[ "${#opt}" -gt 1 ]]; then
		if (set +u; [[ -n "${_AMMOPTPARSE_OPTLONG[$opt]}" ]] ); then
			id="${_AMMOPTPARSE_OPTLONG[$opt]}"
		fi

	# Short option
	elif [[ "${opt:0:1}" == "-" ]] || [[ "${#opt}" -eq 1 ]]; then
		if (set +u; [[ -n "${_AMMOPTPARSE_OPTSHORT[$opt]}" ]] ); then
			id="${_AMMOPTPARSE_OPTSHORT[$opt]}"
		fi
	fi

	if [[ -n "$id" ]]; then
		echo "$id"
		return 0
	else
		ammLog::Dbg "Unregistered option '$opt'"
		return 1
	fi
}


# @description Expand short options and var=val to independant elements
function _ammOptparse::Expand {

	typeset optid skipall=false
	typeset -a options
	for (( optid=0; optid < ${#__AMMLIB_CALLOPTS[@]}; optid+=1 )); do
		typeset opt="${__AMMLIB_CALLOPTS[$optid]}"
		typeset val=""

		# If we should stop parsing next element
		if $skipall; then
			options+=("$opt")
			continue
		fi

		# Check if we have a joined value var=val (can be -abc=def${#__AMMLIB_CALLOPTS[@]} or --abc=def)
		if [[ "${opt#*=}" != "$opt" ]] && [[ "${opt##--}" != "$opt" ]]; then
			val="${opt#*=}"
			opt="${opt%%=*}"
		fi

		# long option
		if [[ ${opt:0:2} == "--" ]]; then
			options+=("$opt")
			ammLog::Dbg "Long option '$opt'"

		# Short option
		elif [[ "${opt:0:1}" == "-" ]]; then
			opt="${opt#-}"

			# Concatenated short options
			if [[ "${#opt}" -gt 1 ]]; then
				typeset cid="0"
				ammLog::Dbg "Concatenated short opt '$opt'"
				for (( c=0; c < ${#opt}; c+=1 )); do
					options+=("-${opt:$c:1}")
				done
			else
				ammLog::Dbg "Short opt: '$opt'"
				options+=("-$opt")
			fi
		# Plain value
		else
			ammLog::Dbg "Plain value option: '$opt'"
			options+=("$opt")

			# Special word and special action: stop all parsing
			if ( set +u; [[ -n "${_AMMOPTPARSE_WORDS[$opt]}" ]] ); then
				if [[ "${_AMMOPTPARSE_WORDS[$opt]}" == "stop" ]]; then
					skipall=true
				fi
			fi
		fi

		if [[ -n "$val" ]]; then
			ammLog::Dbg "Adding embedded value '$val'"
			options+=("$val")
		fi
	done

	# Replace original value
	ammLog::Dbg "Expanded '${__AMMLIB_CALLOPTS[@]}' to '${options[@]}'"
	__AMMLIB_CALLOPTS=("${options[@]}")
}

# @description  Set the description group for the options added next
function ammOptparse::AddOptGroupDesc {
	typeset desc="$1"

	typeset -i nextid="${_AMMOPTPARSE_ORDER+${#_AMMOPTPARSE_ORDER[@]}}"
	_AMMOPTPARSE_DESCRIPTIONGROUP[$nextid]="$desc"
}


# @description  Add an option to the listing
# @arg $1  (string) Options to handle, separated by '|'
# @arg $2  (string) Description for the help
# @arg $3  (string) Default value. Can be made from another option as "%{optname}"
# @arg $4  (string) Validation function
function ammOptparse::AddOpt {
	typeset options="$1"
	typeset description="${2:-}"
	typeset default="${3:-}"
	typeset validation="${4:-}"

	typeset opt id
	# Get the first long-name
	for opt in ${options//|/ }; do
		if [[ "${opt#--}" != "$opt" ]]; then
			id="$(_ammOptparse::OptClean "$opt")"
			ammLog::Dbg "Using '$id' (from $opt) as ID for '$options'"
			break
		fi
	done

	# Validate the ID found
	if [[ -z "${id:-}" ]]; then
		ammLog::Err "You must at least provide one long option"
		return 1
	fi
	if (set +u; [[ -n "${_AMMOPTPARSE_REGISTRANTS[$id]}" ]] ); then
		ammLog::Err "The ID '$id' is already registered by ${_AMMOPTPARSE_REGISTRANTS[$id]}"
		return 1
	fi

	typeset -i parseErr=0
	typeset    registeredVars=""

	# Parse the options
	for opt in ${options//|/ }; do
		if [[ "$opt" =~ (--?)([-_a-zA-Z0-9]+)([!=@].*)? ]]; then
			typeset var="${BASH_REMATCH[2]}"
			typeset valreq="${BASH_REMATCH[3]}"

			# Short option
			if [[ ${BASH_REMATCH[1]} == "-" ]]; then
				if [[ "${#var}" -gt 1 ]]; then
					ammLog::Wrn "Short option '$opt' is more than 1 char. Skipping"
					parseErr+=1
					continue
				fi
				if (set +u; [[ -n "${_AMMOPTPARSE_OPTSHORT[$var]}" ]] ); then
					typeset conflictid="${_AMMOPTPARSE_OPTSHORT[$var]}"
					ammLog::Wrn "Short option '$var' (ID '$id') already registered for ID '$conflictid' at ${_AMMOPTPARSE_REGISTRANTS[$conflictid]}"
					parseErr+=1
					continue
				else
					_AMMOPTPARSE_OPTSHORT[$var]="$id"
					registeredVars+="$var "
				fi

			# Long option
			else
				if (set +u; [[ -n "${_AMMOPTPARSE_OPTLONG[$var]}" ]] ); then
					typeset longid="${_AMMOPTPARSE_OPTLONG[$var]}"
					ammLog::Wrn "Long option '$opt' is already registed as '$longid'"
					parseErr+=1
					continue
				fi
				_AMMOPTPARSE_OPTLONG[$var]="$id"
				registeredVars+="$var "

				# Check for value to set
				if [[ -n "$valreq" ]]; then
					typeset valtyp="${valreq:0:1}"

					case ${valreq:0:1} in
						# Required value
						=)
							_AMMOPTPARSE_VALTYPE[$id]="$valreq"
							;;
						# An array
						@)
							_AMMOPTPARSE_VALTYPE[$id]="$valreq"
							;;
						# Boolean
						!)
							# TODO: Check for existing option collision
							_AMMOPTPARSE_OPTLONG["no$var"]="$id"
							_AMMOPTPARSE_VALTYPE[$id]='!'
							;;
						*)
							ammLog::Wrn "Unhandled requirement char '${valreq:0:1}'"
							parseErr+=1
							continue
						;;
					esac
				fi
			fi
		else
			ammLog::Wrn "The registered option '$opt' is invalid"
			parseErr+=1
			continue
		fi
	done

	if [[ "$parseErr" != 0 ]]; then
		ammLog::Wrn "$parseErr error occurred. Skipping option '$options'"

		# Unregister variables. Note: I'll miss the _AMMOPTPARSE_OPTLONG["no$var"]
		unset _AMMOPTPARSE_VALTYPE[$id]
		for opt in $registeredVars; do
			unset _AMMOPTPARSE_OPTLONG[$opt] _AMMOPTPARSE_OPTSHORT[$opt]
		done
		return 1
	fi

	# Register the provided values
	typeset registrant="$(ammLog::Stackdump 2 1)"
	_AMMOPTPARSE_REGISTRANTS[$id]="$registrant"
	_AMMOPTPARSE_OPTALL[$id]="$options"
	_AMMOPTPARSE_VALUE[$id]="$default"
	_AMMOPTPARSE_DESCRIPTION[$id]="$description"
	_AMMOPTPARSE_VALIDATOR[$id]="$validation"

	# Add the ID to the ordered listing
	_AMMOPTPARSE_ORDER+=("$id")

}

# @description Add one or more words that will infer on the parsing
# @arg $1  (string) words to handle, separated by '|'
# @arg $2  (string) action for the words. Can be 'stop'
function ammOptparse::AddActionWord {
	typeset words="$1"
	typeset action="${2:-stop}"

	case "$action" in
		stop|skip)
			;;
		*)
			ammLog::Err "Invalid action '$action' for words '$words'"
			return 1
			;;
	esac

	# Register words with requested action
	typeset word
	for word in ${words//|/ }; do
		_AMMOPTPARSE_WORDS[$word]="$action"
	done
}


# @description  Parse the options, optionnally only those matching the prefix $1
# @arg $@  (string) Prefix
function ammOptparse::Parse {

	typeset -i r=0
	typeset nounknown=false
	typeset prefix=""
	typeset -i optidstart=0

	# Trigger hook for other modules to register
	ammLib::HookTrigger "before:optparse:parse"

	# Call data expansion
	_ammOptparse::Expand

	# Special options parsing
	typeset opt
	for opt in "$@"; do
		case $opt in
			--no-unknown)
				nounknown=true
				;;
			--skip=*)
				optidstart="${opt##--skip=}"
				;;
			--*)
				ammLog::Wrn "Unknown ammOptparse::Parse() option '$opt'"
				;;
			*)
				if [[ -z "$prefix" ]]; then
					ammLog::Dbg "Parsing options with prefix '$opt'"
					prefix="$opt"
				else
					ammLog::Wrn "prefix already set ($prefix) in ammOptparse::Parse(). Cannot add '$opt'"
					r+=1
				fi
				;;
		esac
	done

	typeset -i optid
	typeset lastvar=""
	# For loop with number so keep at the same place for short options concatenated
	for (( optid=$optidstart; optid < ${#__AMMLIB_CALLOPTS[@]}; optid+=1 )); do
		typeset -i optextra=0
		typeset var="${__AMMLIB_CALLOPTS[$optid]}"
		typeset val="true"
		typeset id=""

		#
		# String validity tests
		#

		# Skip emptied variables (not consumed by previous options)
		[[ -z "$var" ]] && continue

		# Special case: -- to stop processing
		if [[ "$var" == "--" ]]; then
			ammLog::Dbg "Found '--' at position '$optid'. Stopping processing"
			return $r
		fi

		# Check if we accept unparsed options, and our previous one was faulty
		if $nounknown && [[ -n "$lastvar" ]]; then
			ammLog::Err "Invalid unknown option '$lastvar'"
			lastvar=""
			r+=1
		fi


		#
		# Start processing the new input
		#
		# Beware: Registration is done after the main test. breaking early will
		# cause incoherency if not properly done
		#

		# Set lastvar: act as a canary for unparsed values
		lastvar="$var"


		ammLog::Dbg "Processing option '$var' (pos: $optid)"

		# Check the word is a valid registered option (we'll take it as ref)
		id="$(_ammOptparse::OptToId "$var")"
		if [[ -z "$id" ]]; then

			# If it's not a registerd option, maybe it's a registered word
			if ( set +u; [[ -n "${_AMMOPTPARSE_WORDS[$var]}" ]] ); then
				# Do the registered action
				typeset action="${_AMMOPTPARSE_WORDS[$var]}"
				case $action in
					# Stop parsing more options
					stop)
						lastvar=""
						break
						;;
					skip)
						lastvar=""
						continue
						;;
					# Unknown operation, not filtered by AddWord ?!
					*)
						ammLog::Err "Unknown operation '$action' for word '$var'. How was it registered ?!"
						return 1
						;;
				esac

			# Not a registered option, nor registered word.
			else
				# Should we fail on unknown options
				if $nounknown; then
					ammLog::Err "Invalid unknown option '$lastvar'"
					r+=1
				fi
				lastvar=""
				continue
			fi
		fi


		# Remove leading -
		var="${var#-}"
		var="${var#-}"

		# Check if we do prefix filtering
		if [[ -n "$prefix" ]] && [[ "${var#$prefix}" == "$var" ]]; then
			ammLog::Dbg "Skipping option '$var' not matching prefix '$prefix'"
			lastvar=""
			continue
		fi

		# Chcek if we are expecting one or more options
		if ( set +u; [[ -n "${_AMMOPTPARSE_VALTYPE[$id]}" ]] ); then
			typeset valtyp="${_AMMOPTPARSE_VALTYPE[$id]}"
			typeset nwant="${valtyp:1}"

			# Reset default value
			val=""
			case $valtyp in
				# Multiple required values
				=[0-9]*)
					typeset -i nused=0
					while [[ $nused -lt $nwant ]]; do
						# try to get next value and check
						typeset -i nextid="$(($optid+$nused))"
						if [[ $nextid -ge ${#__AMMLIB_CALLOPTS[@]} ]]; then
							ammLog::Err "Option '$var' wants '$nwant' parameters but $nused found '$val'. Stop parsing"
							return 1
						fi

						# Add next value to the list
						ammLog::Dbg "Option '$var' consumed var '${__AMMLIB_CALLOPTS[$nextid]}' (pos $nextid)"
						val="${val:+$val }${__AMMLIB_CALLOPTS[$nextid]}"
						nused+=1
					done
					optextra+=$nwant
					;;

				# Single require value
				=)
					if (set +u; [[ -n "${__AMMLIB_CALLOPTS[$optid+1]}" ]] ); then
						val="${__AMMLIB_CALLOPTS[$optid+1]}"
						ammLog::Dbg "Option '$var' consumed var '$val' (pos $(($optid+1)))"
						optextra+=1
					else
						ammLog::Err "Option '$var' wants 1 parameter, but none found. Stop parsing"
						return 1
					fi
					;;

				@)
					if (set +u; [[ -n "${__AMMLIB_CALLOPTS[$optid+1]}" ]] ); then
						# Append previously set
						if (set +u; [[ -n "${_AMMOPTPARSE_VALUE[$id]}" ]] ); then
							val="${_AMMOPTPARSE_VALUE[$id]}"
							val+="$_AMMOPTPARSE_ARRSEP"
						fi
						val+="${__AMMLIB_CALLOPTS[$optid+1]}"
						ammLog::Dbg "Option '$var' consumed var '$val' (pos $(($optid+1)))"
						optextra+=1
					else
						ammLog::Err "Option '$var' wants 1 parameter, but none found. Stop parsing"
						return 1
					fi
					;;

				# Boolean + negation
				!)
					# Check if the option without "no" is registered to the same ID
					if [[ "${var:0:2}" == "no" ]] && ( set +u; [[ "${_AMMOPTPARSE_OPTLONG[${var:2}]}" == "$id" ]] ); then
						ammLog::Dbg "Option '$var' is the negation of '${var:2}' for ID '$id'"
						val="false"
					else
						ammLog::Dbg "Option '$var' set to true for ID '$id'"
						val="true"
					fi
					;;

				# Unmanaged format
				*)
					ammLog::Err "Unknown required format '$valtyp'. How was it registered ?!"
					return 1
					;;
			esac
		fi


		# Register the value
		ammLog::Dbg "Setting '$id' value to '$val'"
		_AMMOPTPARSE_VALUE[$id]="$val"

		# Unset parsed element
		#newargs+=("$var")
		for (( i=0; i <= $optextra; i+=1 )); do
			__AMMLIB_CALLOPTS[$(($optid + $i))]=""
		done
		optid+=$optextra

		# Reset the lastvar, as we parsed it correctly
		lastvar=""
	done

	# Redo the lastvar test for last option
	if $nounknown && [[ -n "$lastvar" ]]; then
		ammLog::Err "Invalid unknown option '$lastvar'"
		lastvar=""
		r+=1
	fi

	# Validation must be done after due to default values
	for id in ${!_AMMOPTPARSE_VALUE[@]}; do
		#typeset val="${_AMMOPTPARSE_VALUE[$id]}"
		# If we have a validator, we should test it
		if (set +u; [[ -n "${_AMMOPTPARSE_VALIDATOR[$id]}" ]] ); then
			typeset validator="${_AMMOPTPARSE_VALIDATOR[$id]}"
			# Use parse for %{} format dereference
			typeset val="$(ammOptparse::Get "$id")"

			# Don't use quotes to avoid composite values to be used in name
			if ammEnv::IsFunc $validator; then
				# TODO: Clean this function call
				#typeset valcall="${validator//%
				if ! "${validator%% *}" "$val" "${validator#* }"; then
					ammLog::Err "Option ID '$id' refused value '$val' by validator '$validator'"
					r+=1
				fi
				ammLog::Dbg "Option ID '$id' accepted value '$val' by validator '$validator'"
			else
				ammLog::Err "Validation function '$validator' is not defined as function"
				r+=1
			fi
		fi
	done

	if [[ -n "$(_ammOptparse::OptToId "help")" ]] && [[ "$(ammOptparse::Get "help")" == "true" ]]; then
		ammOptparse::Help
		exit 0
	fi

	ammLib::HookTrigger "after:optparse:parse"
	return $r
}

# @description Get value for a parameter that was parsed
# @arg $1  (string) A short, long or id option value
function ammOptparse::Get {
	typeset elem="$1"
	typeset id="$(_ammOptparse::OptToId "$elem")"

	if [[ -z "$id" ]]; then
		ammLog::Wrn "Requesting non-registered option '$elem'"
		return 1
	fi
	ammLog::Dbg "Requested elem '$elem' mapped to '$id'"

	typeset val=""
	if (set +u; [[ -n "${_AMMOPTPARSE_VALUE[$id]}" ]] ); then
		val="${_AMMOPTPARSE_VALUE[$id]}"

		# Array to be returned
		if (set +u; [[ "${_AMMOPTPARSE_VALTYPE[$id]}" == "@" ]] ); then
			# Split var with separator
			echo '('
			while [[ "${val##*$_AMMOPTPARSE_ARRSEP}" != "$val" ]]; do
				typeset arrv="${val%%$_AMMOPTPARSE_ARRSEP*}"
				echo "'$arrv'"
				val="${val#*$_AMMOPTPARSE_ARRSEP}"
			done
			echo "'$val' )"

		# Standard variable
		else
			# Special format to refer to another variable
			while [[ "$val" =~ %\{([-a-zA-Z0-9_:\-\.]+)\} ]]; do
				# Fetch the referenced var
				typeset subvarname="${BASH_REMATCH[1]}"
				typeset subvarval="$(ammOptparse::Get "$subvarname")"

				# Replace it in the current variable
				val="${val//%\{$subvarname\}/$subvarval}"
			done
			echo "$val"
		fi
	fi
}

function ammOptparse::GetAll {
	ammEnv::VarExport _AMMOPTPARSE_VALUE|cut -d'=' -f2-
}


# @description Get unparsed options. To be used as 'eval set $(ammOptparse::GetUnparsedOpts)'
# @noarg
function ammOptparse::GetUnparsedOpts {
	for i in ${!__AMMLIB_CALLOPTS[@]}; do
		[[ -n "${__AMMLIB_CALLOPTS[$i]}" ]] && echo -n "\"${__AMMLIB_CALLOPTS[$i]}\" "
	done
}


# @description Generate the help from registered options
# @noarg
function ammOptparse::Help {

	typeset optid
	typeset -i optSize=10 descSize

	# Search the longest group
	for optid in ${_AMMOPTPARSE_OPTALL[@]}; do
		[[ ${#optid} -gt ${optSize} ]] && optSize=${#optid}
	done

	# Columns of the output
	typeset -i termSize="${COLUMNS:-$(ammExec::Exists tput && tput cols)}"
	[[ "$termSize" == "0" ]] && termSize=80
	descSize="$(( $termSize - 2 - $optSize - 4 ))"

	# highlight only if non-parsing output (human did it)
	typeset currValBold="" currValRst=""
	if ! $__AMMLIB_STDOUTPIPED; then
		currValBold="$(ammLog::Color bold white)"
		currValRst="$(ammLog::Color reset)"
	fi

	# Display
	for optidnum in ${!_AMMOPTPARSE_ORDER[@]}; do
		typeset optid="${_AMMOPTPARSE_ORDER[$optidnum]}"

		# Check and display new description group
		if (set +u; [[ -n "${_AMMOPTPARSE_DESCRIPTIONGROUP[$optidnum]}" ]] ); then
			echo
			echo "${_AMMOPTPARSE_DESCRIPTIONGROUP[$optidnum]}"
		fi

		# TODO: Parse opt to remove special chars like = @ !
		typeset opts="${_AMMOPTPARSE_OPTALL[$optid]}"
		typeset desc="${_AMMOPTPARSE_DESCRIPTION[$optid]:-}"

		# Append current value to the end
		if (set +u; [[ -n "${_AMMOPTPARSE_VALUE[$optid]}" ]] ); then
			desc+=". Current value: '$currValBold${_AMMOPTPARSE_VALUE[$optid]}$currValRst'"
		fi

		while [[ -n "$desc" ]]; do
			printf "  %-${optSize}.${optSize}s    %.${descSize}s\n" "$opts" "$desc"
			desc="${desc:$descSize}"
			opts="${opts:$optSize}"
		done
	done
}
