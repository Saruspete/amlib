# vim: ft=sh ts=4

if ! [[ "${FUNCNAME[1]}" = ammLib::Load* ]]; then
	echo >&2 "You must not source this library ($BASH_SOURCE): Use function ammLib::Load"
	exit 1
fi

function ammDate::MetaCheck {
	ammExec::Require date
}

function ammDate::MetaInit {
	__ammDateCurrYear="$(date +%Y)"
	__ammDateNextYear="$(( $__ammDateCurrYear + 1 ))"
	__ammDateCurrMonth="$(ammDate::ParseInt $(date +%m) )"
	__ammDateNextMonth="$(( ($__ammDateCurrMonth % 12) + 1 ))"
	__ammDateCurrDayOfMonth="$(ammDate::ParseInt $( date +%d) )"
	__ammDateCurrDayOfWeek="$(date +%u)"

	# TODO: Set a timer to update values in case of long-running script
}


function ammDate::ParseInt {
	typeset int="${1:-}"

	# Remove leading 0 (octal)
	while [[ "${int#0}" != $int ]]; do
		int="${int#0}"
	done

	# Check for Hex and convert to Dec
	[[ "${int:0:1}" == "x" ]] && int="$(( 16#${int:1} ))"

	echo "$int"
}

# Simple dates. Just beware of leading 0 (octal notation)
typeset -gi __ammDateCurrYear
typeset -gi __ammDateNextYear
typeset -gi __ammDateCurrMonth
typeset -gi __ammDateNextMonth
typeset -gi __ammDateCurrDayOfMonth
typeset -gi __ammDateCurrDayOfWeek

# -----------------------------------------------------------------------------
# Date calculation
# -----------------------------------------------------------------------------

function ammDate::ToEpoch {
	typeset time="$1"
	date +%s -d "$time"
}

function ammDate::Today {
	echo "${__ammDateCurrYear}-${__ammDateCurrMonth}-${__ammDateCurrDayOfMonth}"
}


function ammDate::Calculate {
	typeset year="${1:-$__ammDateCurrYear}"
	typeset month="${2:-$__ammDateCurrMonth}"
	typeset day="${3:-$__ammDateCurrDayOfMonth}"

	# Special formats
	typeset ypref="${year:0:1}"
	typeset mpref="${month:0:1}"
	typeset dpref="${day:0:1}"

	# Year
	if [[ "$ypref" == "+" ]] || [[ "$ypref" == "-" ]]; then
		year="$(( $__ammDateCurrYear + $year ))"
	fi

	# Month
	if [[ "$mpref" == "+" ]] || [[ "$mpref" == "-" ]]; then
		month="$(( $__ammDateCurrMonth + $month ))"
	fi

	# Days
	if [[ "$dpref" == "+" ]] || [[ "$dpref" == "-" ]]; then
		day="$(( $__ammDateCurrDayOfMonth + $day ))"
	fi


	# TODO: Manage the days
	typeset -i moffset=0 yoffset=0

	# The second offset must have 1 day removed, as days starts at 01
	typeset -i sec="$(( ($day-1) * 86400))" # 60s * 60m * 24h

	# Months are a big offset, avoid using seconds for these as drift/leap risk is high
	if [[ $month -gt 12 ]]; then
		moffs="$(( ($month-1) % 12 +1 ))"
		yoffs="$(( $month  / 12 ))"

		month="$moffs"
		year="$(( $year + $yoffs ))"

	elif [[ $month -lt 1 ]]; then
		# 12 + (negative time diff)
		moffs="$(( 12 + ( ($month-1) % 12 +1) ))"
		yoffs="$(( $month / 12 ))"

		month="$moffs"
		year="$(( $year -1 + $yoffs))"
	fi

	sec+=$(ammDate::ToEpoch "$year-$month-01 00:00:00 UTC")
	date "+%Y-%m-%d" -d "@$sec"
}

function ammDate::FirstDayOfMonth {
	typeset month="${1:-$__ammDateCurrMonth}"
	typeset year="${2:-$__ammDateCurrYear}"
	typeset format="${3:-%u}"

	typeset date="$(ammDate::Calculate "$year" "$month" "01")"

	date +"$format" -d "$date 12:00:00"
}

# -----------------------------------------------------------------------------
# Waiting
# -----------------------------------------------------------------------------


# -----------------------------------------------------------------------------
# Date related to business
# -----------------------------------------------------------------------------
function ammDate::IsBusinessRunning {
	typeset timeCurr="$(date "+%H:%M")"

	for timerange in "$@"; do
		typeset bizStart="${timerange%%-*}"
		typeset bizStop="${timerange##*-}"

		# If we are in range, it's business time!
		ammDate::IsInRange "$timeCurr" "$bizStart" "$bizStop" && return 0
	done

	return 1
}

function ammDate::IsBusinessTimeFair {

	# Setup the avail minutes array
	typeset -a avail
	while [[ ${#avail[@]} -lt 1440 ]]; do
		avail[${#avail[@]}]=1
	done

	# Check registered time-ranges
	typeset timerange
	for timerange in "$@"; do
		typeset minStart="$(ammDate::ToMin "${timerange%%-*}")"
		typeset minStop="$(ammDate::ToMin "${timerange##*-}")"

		# Prepare loop minstop => minstart (decrement) to ease overnight
		typeset -i i=$minStop

		# Overnight ex: 23=>7: add 1 virt day for counter decrement
		[[ "$minStart" -gt "$minStop" ]] && i=i+1440

		while [[ $i -gt $minStart ]]; do
			unset avail[$(($i%1440+1))]
			i=i-1
		done

	done

	# Get max consecutive min range
	typeset -i cnt=0 maxcnt=0 firstcnt=0 prevmin=0
	typeset -a availkeys=(${!avail[@]})
	typeset    availlast="${availkeys[-1]}"

	for min in ${availkeys[@]}; do
		# last minute not consecutive OR end of loop
		if [[ $(( $prevmin+1 )) -ne $min ]] && [[ $min -ne 0 ]] || [[ $min == "$availlast" ]]; then
			# First save and first minute was avail (used for rollover)
			[[ $maxcnt -eq 0 ]] && [[ ${avail[0]} -eq 1 ]] && firstcnt=$cnt
			# last iteration (add for overnight rollover)
			[[ $min -eq 1439 ]] && cnt=cnt+$firstcnt

			# Save the max and reset
			[[ $cnt -gt $maxcnt ]] && maxcnt=$cnt

			cnt=1
		fi
		cnt=cnt+1
		prevmin=min
		
	done

	# Max consecutive time
	echo $maxcnt
	[[ $maxcnt -ge 120 ]]

}
