# vim: ft=sh ts=4

if ! [[ "${FUNCNAME[1]}" = ammLib::Load* ]]; then
	echo >&2 "You must not source this library ($BASH_SOURCE): Use function ammLib::Load"
	exit 1
fi

# -----------------------------------------------------------------------------
# AMM Lib meta stubs
# -----------------------------------------------------------------------------

function ammProcess::MetaCheck {
	# Stick with coreutils
	ammExec::Require tr head
	ammLib::Require string
}

function ammProcess::MetaInit {
	ammLib::Require string
}
# -----------------------------------------------------------------------------
# Basic process state
# -----------------------------------------------------------------------------

function ammProcess::ExeGet {
	typeset pid="$1"

	typeset base="/proc/$pid"
	[[ -d "$base" ]] || return 1

	# Try to read the symlink exe (not always possible
	typeset exe=""
	if [[ -r "$base/exe" ]] && [[ -n "$(readlink -f "$base/exe")" ]]; then
		exe="$(readlink -f "$base/exe")"

	# Read maps
	elif [[ -r "$base/maps" ]]; then
		typeset memarea perm offset fd inum path _junk
		while read memarea perm offset fd inum path _junk; do
			# The first r + exec is the binary
			if [[ "$perm" =~ r.x. ]]; then
				exe="$path"
				break
			fi
		done < "$base/maps"

	# Try to guess from cmdline
	elif [[ -r "$base/cmdline" ]]; then
		exe="$(tr '\0' '\n' < "$base/cmdline"| head -n 1)"
	fi

	echo "$exe"
	[[ -n "$exe" ]]
}

function ammProcess::PidExists {
	typeset pid="$1"
	typeset exe="${2:-}"

	typeset base="/proc/$pid"

	# No specific app name, just check pid
	if [[ -z "$exe" ]]; then
		# Check if it's a process, not a thread (same pid for base & task)
		[[ -d "$base/task/$pid" ]] && return 0

	# Check also the exe (comm or cmdline)
	else
		if [[ -d "$base" ]]; then
			typeset exepath="$(ammProcess::ExeGet "$pid")"
			if [[ -z "$exepath" ]]; then
				ammLog::Debug "Unable to find exe path for pid $pid. Assuming from PID only"
				return 0
			fi

			# Absolute path, more checks
			if [[ "${exe:0:1}" == "/" ]]; then

				# If the provided file exists, compare them with inode num
				if [[ -e "$exe" ]]; then
					[[ "$exe" -ef "$exepath" ]] && return 0
				# Simple string comparison
				else
					[[ "$exepath" == "$exe" ]] && return 0
				fi

			# Relative or name only
			else
				# Plain text comparison (does it 
				[[ "$exepath" == "$exe" ]] && return 0

				# Does the running bin ends with provided exe
				[[ "${exepath%%$exe}" != "$exepath" ]] && return 0

				# Maybe it's a regex ?
				[[ $exepath =~ $exe ]] && return 0

			fi
		fi
	fi

	# Notthing matched, not running
	return 1
}


function ammProcess::LastRun {
	:
}

# -----------------------------------------------------------------------------
# Custom naming execution
# -----------------------------------------------------------------------------

function ammProcess::Run {
	typeset funcname="$1"; shift

	if ! ammEnv::IsFunc "${funcname}Cmd"; then
		ammLog::Error "Unable to run '$funcname' as not '${funcname}Cmd' is defined"
		return 1
	fi

	if ! ammEnv::IsFunc "${funcname}Parse"; then
		ammLog::Error "Unable to run '$funcname' as not '${funcname}Parse' is defined"
		return 1
	fi

	# TODO: Add some options parsing for generic features like custom-user, timeout, etc...

	typeset -i ret=0
	typeset    cmd="$(${funcname}Cmd "$@")"
	typeset    tmpbase="$__AMMLIB_DATATMP/ammProcess::/${funcname}"
	mkdir -p "$tmpbase"

	# Call the executing function
	$cmd >$tmpbase/stdout 2>$tmpbase/stderr
	ret=$?

	# Call the parsing function
	${funcname}Parse "$tmpbase/stdout" "$tmpbase/stderr"

	# Return real result
	return $ret
}


# -----------------------------------------------------------------------------
# Process timeout and repeat
# -----------------------------------------------------------------------------

function ammProcess::Timeout {
	typeset time="$1"; shift

	typeset ret="-1"
	if ammExec::Exists timeout; then
		timeout --preserve-status $time "$@"
		ret=$?
	elif ammExec::Exists perl; then
		perl -e "alarm $time; exec @ARGV" "$@"
		ret=$?
	else
		ammLog::Error "Unable to find a suitable timeout function"
		return 1
	fi

	return $ret
}

function ammProcess::Alarm {
	:
}

function ammProcess::Until {
	typeset func="$1"
	typeset limit=${2:-300}
	typeset timewait="${3:-2}"

	typeset -i i=0 r=0
	while :; do

		# Call
		$func
		r=$?

		[[ $r -eq 0 ]] && return 0

		[[ $i -ge $limit ]] && break
		sleep $timewait

		i+=1
	done

	return $r
}

# -----------------------------------------------------------------------------
# Process pool and parallism
# -----------------------------------------------------------------------------

typeset -gA __AMMPROCESS_POOL
typeset -gA __AMMPROCESS_POOL_LASTJOBID
typeset -ga __AMMPROCESS_POOL_PID2JOBID

function ammProcess::PoolCreate {
	typeset name="$1"

	# Create holding folder
	typeset datapath="$__AMMLIB_DATATMP/processpool/$name"
	mkdir -p "$datapath"

	touch "$datapath/jobs.txt"

	__AMMPROCESS_POOL[$name]="$datapath"
}


function ammProcess::PoolExists {
	typeset name="$1"

	# Check pool
	if ! ( set +u; [[ -n "${__AMMPROCESS_POOL[$name]}" ]] ); then
		ammLog::Error "Unknown pool name '$name'"
		return 1
	fi

	typeset datapath="${__AMMPROCESS_POOL[$name]}"
	if ! [[ -d "$datapath" ]]; then
		ammLog::Error "Pool '$name' var exists but not its datapath ($datapath)"
		return 1
	fi

	echo "$datapath"
}

function ammProcess::PoolStart {
	typeset name="$1"
	typeset concurrency="${2:-5}"
	typeset timeouttask="${3:-}"
	typeset timeouttotal="${4:-}"

	typeset -i nfailed=0
	typeset datapath="$(ammProcess::PoolExists "$name")"
	[[ -z "$datapath" ]] && return 1

	# Load the jobs todo
	typeset -a joblist jobrunning
	readarray joblist < "$datapath/jobs.txt"
	ammLog::Debug "Executing $joblist"

	# Start the pool
	typeset -i jobid procid proccnt=0
	for jobid in ${!joblist[@]}; do
		typeset jobcmd="$(ammString::Trim "${joblist[$jobid]}")"
		typeset timeoutcmd=""

		if [[ -n "$timeouttask" ]]; then
			timeoutcmd="ammProcess::Timeout $timeouttask"
		fi

		# Run the job (and close stdin)
		ammLog::Info "Starting $jobcmd (id:$jobid) in background"
		#echo "# Starting $jobcmd" >| "$datapath/job.$jobid.out"
		eval "$timeoutcmd $jobcmd >> '$datapath/job.$jobid.out' 2> '$datapath/job.$jobid.err' 0>/dev/null &"
		# A bit of bookkeeping
		jobrunning[$!]=-1
		__AMMPROCESS_POOL_PID2JOBID[$!]=$jobid

		# Loop if we have reached the max number of concurrency
		while [[ ${#jobrunning[@]} -ge $concurrency ]] || (
			[[ "$jobid" -eq "${__AMMPROCESS_POOL_LASTJOBID[$name]}" ]] && [[ "${#jobrunning[@]}" -gt 0 ]]
		); do
			# Find a candidate for finalization
			typeset -i reaped=0
			for pid in ${!jobrunning[@]}; do
				# Check if PID exists. If not, wait and reap it
				if ! ammProcess::PidExists $pid; then
					wait $pid
					typeset -i ret=$?

					if [[ $ret -eq 127 ]]; then
						ammLog::Warning "We waited for pid $pid but return code 127 (= was not created)"
					fi
					[[ $ret -ne 0 ]] && nfailed+=1

					# Populate return code in path and log
					typeset -i jid="${__AMMPROCESS_POOL_PID2JOBID[$pid]}"
					echo "$ret" > "$datapath/job.$jid.ret"
					ammLog::Info "Job $jid (pid:$pid) finished with return code $ret"

					unset jobrunning[$pid]
					unset __AMMPROCESS_POOL_PID2JOBID[$pid]
					reaped+=1
				fi
			done

			# Check if we have reaped a process
			if [[ $reaped -gt 0 ]]; then
				ammLog::Debug "Reaped $reaped processes, will start a new one"

			# No process reaped, sleep a bit to avoid busy loop
			else
				sleep .1
			fi

			# TODO: Global timeout for the pool
			if [[ -n "$timeouttotal" ]]; then
				:
			fi
		done
	done


	return $nfailed
}

function ammProcess::PoolTaskAdd {
	typeset name="$1"; shift

	typeset datapath="$(ammProcess::PoolExists "$name")"
	[[ -z "$datapath" ]] && return 1

	echo "$@" >> "$datapath/jobs.txt"
	__AMMPROCESS_POOL_LASTJOBID[$name]="$(( $(ammString::CountLines "$datapath/jobs.txt") -1 ))"

	echo ${__AMMPROCESS_POOL_LASTJOBID[$name]}
}

# -----------------------------------------------------------------------------
# User changing execution
# -----------------------------------------------------------------------------


function ammProcess::RunAs {
	typeset runas="$1"; shift

	typeset curruser="$__AMMLIB_USERNAME"
	typeset ret=0

	# Exec from stdin
	if [[ "$@" = "-" ]]; then
		ammLog::Debug "Reading commands to run as '$runas' from stdin"

		# If no user specified, or we already are correct one...
		if [[ -z "$runas" ]] || [[ "$runas" = "$curruser" ]]; then
			eval "$(cat)" 98>&- 99>&-
			ret=$?

		# root... yay !
		elif [[ "$curruser" = "root" ]]; then
			cat | su -m "$runas" 98>&- 99>&-
			ret=$?

		elif ammExec::Exists sudo >/dev/null && sudo -nl 2>/dev/null|grep 'may run the following commands' >/dev/null; then
			ammLog::Debug "Using sudo to run as '$runas' from stdin"
			# maybe should parse "sudo -l" output more...
			typeset line
			while read line; do
				sudo -n -u "$runas" $line 98>&- 99>&-
			done

		# No way to change ?
		else
			ammLog::Error "Cannot change from user $curruser to user $runas"
			ret=4
		fi

	# Exec from parameters
	else

		# No user specified, or already correct user
		if [[ -z "$runas" ]] || [[ "$runas" = "$curruser" ]]; then
			ammLog::Debug "Using eval to run as '$runas' cmd: '$@'"
			#eval "$@" 98>&- 99>&-
			"$@" 98>&- 99>&-
			ret=$?

		# root... yay !
		elif [[ "$curruser" = "root" ]]; then
			ammLog::Debug "Using su to run as '$runas' cmd: '$*'"
			# I need to flatten, hence '$*' instead of '$@'. Beware...
			su -m -c "$*" "$runas" 98>&- 99>&-
			ret=$?

		# Maybe handle sudo ?
		elif ammExec::Exists sudo >/dev/null && sudo -nl 2>/dev/null|grep 'may run the following commands' >/dev/null; then
			ammLog::Debug "Using sudo to run as '$runas' cmd: '$@'"
			# maybe should parse "sudo -l" output more...
			sudo -n -u "$runas" "$@" 98>&- 99>&-
			ret=$?

		# Fails...
		else
			ammLog::Error "Cannot exec '$@' as user $runas from user $curruser"
			ret=4
		fi
	fi

	return $ret
}


# -----------------------------------------------------------------------------
# Daemon management
# -----------------------------------------------------------------------------
typeset __AMMPROCESS_DAEMONSTATEBASE="$__AMMLIB_DATATMP/process.daemon/"

function _ammProcess::DaemonFilestate {
	typeset process="$1"
	echo "$__AMMPROCESS_DAEMONSTATEBASE/$process"
}


function ammProcess::DaemonCreate {
	:
}

function ammProcess::DaemonIsAlive {
	:
}

function ammProcess::DaemonZap {
	:
}
