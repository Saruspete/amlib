# vim: ft=sh ts=4

if ! [[ "${FUNCNAME[1]}" = ammLib::Load* ]]; then
	echo >&2 "You must not source this library ($BASH_SOURCE): Use function ammLib::Load"
	exit 1
fi

# -----------------------------------------------------------------------------
# AMM Lib meta stubs
# -----------------------------------------------------------------------------

function ammNetwork::MetaCheck {
	ammLib::Require process string
}

function ammNetwork::MetaInit {
	ammLib::Load process string
}

# -----------------------------------------------------------------------------
# Ping helpers
# -----------------------------------------------------------------------------

function ammNetwork::PingCmd {
	typeset    dest="$1"
	typeset -i count="${2:-1}"
	typeset -i tmout="${3:-2}"
	typeset -i deadl="${4:-5}"
	typeset -i size="${5:-56}"
	typeset    extraopts="${6:-}"

	echo ping -c ${count} -W $tmout -w $deadl - $dest
}

function ammNetwork::PingParse {
	typeset stdout="$1"
	typeset stderr="$2"

	# Error reporting
	# PING 1.1 (1.0.0.1) 56(84) bytes of data.
	# 64 bytes from 1.0.0.1: icmp_seq=1 ttl=56 time=5.51 ms
	# 64 bytes from 1.0.0.1: icmp_seq=2 ttl=56 time=5.06 ms
	# 64 bytes from 1.0.0.1: icmp_seq=3 ttl=56 time=5.34 ms
	# ^C
	# --- 1.1 ping statistics ---
	# 3 packets transmitted, 3 received, 0% packet loss, time 4ms
	# rtt min/avg/max/mdev = 5.064/5.304/5.510/0.202 ms

	echo "typeset ERR='' RES=''"
	echo "typeset -A TIMES"

	# Fist check if we had stderr
	typeset line
	while read line; do
		if ammString::Contains "$line" "Name or service not known"; then
			echo "ERR='unknown host'"
			return 1
		fi
	done < <(ammString::InputToLines "$stderr")

	# TODO: ping parsing
	while read line; do
		:
	done < <(ammString::InputToLines "$stdout")

}

function ammNetwork::Ping {
	typeset dest="$1"

	typeset cmd="$(ammNetwork::PingCmd "$dest" 3 1 5)"
	

}

# -----------------------------------------------------------------------------
# Traceoute helpers
# -----------------------------------------------------------------------------
function ammNetwork::TracerouteCmd {
	typeset dest="$1"
	typeset opts="${2:-}"

	typeset cmd="traceroute"

	# 
	if ammString::IsIPv6 "$dest"; then
		cmd="traceroute6"
	fi

	cmd+="$opts $dest"

	echo "$cmd"
}

function ammNetwork::TracerouteParse {

	typeset stdout="${1:-}"
	typeset stderr="${2:-}"

	typeset tgthost tgtip
	echo 'typeset err=""'
	echo 'typeset -a dns ip timeall timemin timeavg timemax err'

	#typeset hop gwdns gwip timing1 _junk
	#$stdout | while read  hop gwdns gwip timing1 _junk; do
	typeset hop data lasthop
	while read  hop data; do
		# Parse line to positionning parameters
		data="${data//'*'/_}"
		set - $data

		# Skip first line
		if [[ $hop == "traceroute" ]]; then
			tgthost="$2"
			tgtip="$3"
			continue
		fi

		typeset -i timetot=0 timecnt=0
		typeset    dns="" ip="" timeall=""  errstr=""

		# Traceroute may have unusual output with asymetric routes
		#  7  * 108.170.245.1 (108.170.245.1)  4.949 ms  5.384 ms
		#  5  193.252.137.10 (193.252.137.10)  5.405 ms  5.220 ms  5.345 ms
		#  9  par21s11-in-f3.1e100.net (172.217.19.227)  5.000 ms 108.170.244.177 (108.170.244.177)  5.991 ms par21s11-in-f3.1e100.net (172.217.19.227)  4.934 ms
		while [[ -n "${1:-}" ]]; do

			# New route added
			if [[ -n "${2:-}" ]] && [[ "${2#(}" != "$2" ]]; then
				dns+="$1 "
				ip+="$2 "
				shift 2
			fi

			# No response and no time
			if [[ "$1" == "_" ]]; then
				timeall+="999999 "
				errstr+="timeout  "
				shift

			# Simple response, use last
			elif [[ -n "${2:-}" ]] && [[ "$2" == "ms" ]]; then
				#timetot+=$(($1 * 1000))
				timetot+="${1//./}"
				timecnt+=1
				timeall+="${1//.} "
				shift 2

				if [[ -n "${1:-}" ]] && [[ "${1:0:1}" == "!" ]]; then
					typeset errcode="${1#!}"
					typeset errstr=""
					case "$errcode" in
						H)  errstr+="Host unreachable "  ;;
						N)  errstr+="Network unreachable " ;;
						P)  errstr+="Port unreachable " ;;
						S)  errstr+="Source route failed " ;;
						F)  errstr+="Fragmentation needed " ;;
						X)  errstr+="communication administratively prohibited " ;;
						V)  errstr+="Host precedence violation " ;;
						C)  errstr+="precedence cutoff in effect " ;;
						[0-9]) errstr+="ICMP Error code '$errcode' " ;;
					esac

					shift
				fi

			else
				ammLog::Wrn "Unhandled output: '$1'"
				shift
			fi

		done

		ip="${ip//[()]/}"

		[[ $timecnt -eq 0 ]] && timecnt=1
		typeset -i avg=$(($timetot / $timecnt))

		typeset -i t min=9999999 max=0
		for t in $timeall; do
			[[ $t -lt $min ]] && min=$t
			[[ $t -gt $max ]] && max=$t
		done

		echo "dns[$hop]='$dns'; ip[$hop]='$ip' timeall[$hop]='$timeall' timemin[$hop]='$min' timeavg[$hop]='$avg' timemax[$hop]='$max' err[$hop]='$errstr'"
		lasthop=$hop
	done < <(ammString::InputToLines $stdout)

	echo "hops='$lasthop'"

}



function ammNetwork::TraceroutetcpCmd {
	typeset dest="$1"
	typeset port="${2:-22}"
	typeset opts="${3:-}"

	ammNetwork::TracerouteCmd "$dest" "-T -p $port $opts"
}

# -----------------------------------------------------------------------------
# Port and service tests
# -----------------------------------------------------------------------------


function ammNetwork::PortOpen {
	typeset dest="$1"
	typeset port="$2"
	typeset tmout="${3:-2}"

	typeset ret=1
	typeset prefix=""
	[[ -n "$tmout" ]] && prefix="ammProcess::Timeout $tmout"
	

	# Try with nc. Beware: there is netcat-openbsd & netcat-traditional
	if ammExec::Exists "nc"; then
		# TODO: Check for nmap vs netcat
		$prefix nc -z "$dest" "$port"
		ret=$?

	# Pretty standard telnet, but not everywhere
	elif ammExec::Exists "telnet"; then
		$prefix telnet "$dest" "$port" 0>/dev/null 2>/dev/null| grep 'Escape character is' >/dev/null
		ret=$?

	# Fallback to bash only (no option available, and buggy timeout)
	else
		typeset tmpscript="$__AMMLIB_DATATMP/ammNetwork/script.portopen.sh"

		# Create temp script for using timeout
		if ! [[ -s "$tmpscript" ]]; then
			mkdir -p "${tmpscript%/*}"
			echo >| "$tmpscript" "#!/usr/bin/env bash"
			echo >> "$tmpscript" "exec 5<> /dev/tcp/$dest/$port; [[ \$? -eq 0 ]] && exec 5>&-"
			chmod +x "$tmpscript"
		fi

		$prefix "$tmpscript" "$dest" "$port" 2>/dev/null
		ret=$?
	fi

	return $ret
}

# -----------------------------------------------------------------------------
# Network discovery
# -----------------------------------------------------------------------------

function ammNetwork::Cdp {
	typeset iface="$1"
	typeset timeout="${2:-70}"
	# CDP packets are usually sent every 60 sec

	typeset out=""

	if ammExec::Exists tcpdump; then
		# TODO: Use process / user to run as root
		out="$(ammProcess::Timeout $timeout  tcpdump -i $iface -nn -v -s 1500 -c 1 'ether[20:2] == 0x2000 and not multicast')"
		# 14:42:57.087609 CDPv2, ttl: 180s, checksum: 692 (unverified), length 358
		# Device-ID (0x01), length: 11 bytes: 'Public_DMZ'
		# Address (0x02), length: 13 bytes: IPv4 (1) XXX.XXX.XX.X
		# Port-ID (0x03), length: 16 bytes: 'FastEthernet0/21'
		# Capability (0x04), length: 4 bytes: (0x00000028): L2 Switch,
		# IGMP snooping
		# Version String (0x05), length: 220 bytes:
		#   Cisco Internetwork Operating System Software
		#   IOS (tm) C2950 Software (C2950-I6Q4L2-M), Version 12.1(12c)EA1,
		# RELEASE SOFTWARE (fc1)
		#   Copyright (c) 1986-2002 by cisco Systems, Inc.
		#   Compiled Sun 24-Nov-02 23:31 by antonino
		# Platform (0x06), length: 21 bytes: 'cisco WS-C2950G-24-EI'
		# Protocol-Hello option (0x08), length: 32 bytes:
		# VTP Management Domain (0x09), length: 0 byte: ''
		# 1 packets captured
		# 2 packets received by filter
		# 0 packets dropped by kernel

	fi

	# From: http://troysunix.blogspot.com/p/tools.html
	# Mirror: https://raw.githubusercontent.com/renden/myscripts/master/getldp/getldp.pl
	if [[ -z "$out" ]] && ammExec::Exists getldp.pl; then
		out="$(ammProcess::Timeout $timeout  getldp.pl -i $iface x -t $timeout)"
		# somehost [0] /usr/local/bin/getldp.pl -i hme0 -x -t 120
		# Watching for CDP packet on hme0 for 120 seconds...
		# device-id:      my.switch
		# platform:       cisco Catalyst 6000
		# port-id:        FastEthernet6/41
		# vtp-mgmt-dom:   Services
		# native-vlan:    11
		# CDPversion:     2
	fi

	if [[ -z "$out" ]] && ammExec::Exists cdpr; then
		:
	fi

	if [[ -n "$out" ]]; then
		echo "$out"
		return 0
	else
		ammLog::Err "No collector available or collection failed"
		return 1
	fi
}



