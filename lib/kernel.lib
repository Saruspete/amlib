# vim: ft=sh ts=4

if ! [[ "${FUNCNAME[1]}" = ammLibLoad* ]]; then
	echo >&2 "You must not source this library ($BASH_SOURCE): Use function ammLibLoad"
	exit 1
fi

# -----------------------------------------------------------------------------
# AMM Lib meta stubs
# -----------------------------------------------------------------------------

function ammKernelMetaInit {
	ammLibLoad string
	ammExecRequires wc
}

# -----------------------------------------------------------------------------
# Kernel modules management
# -----------------------------------------------------------------------------

function ammKernelModList {
	
	:
}

function ammKernelModDepList {

	typeset mod size cnt deps _junk
	while read mod size cnt deps _junk; do
		# if the module is the requested list
		ammStringContainsWord "$mod" "$@" || continue

		# Recurse on these modules (and primt them before original calling module)
		[[ "$deps" != "-" ]] && ammKernelModDepList ${deps//,/ }
		#echo -n " ${deps//,/ }"

		# Finally, print current module
		echo -n " $mod"
	done < /proc/modules
}

# Returns if a function has an unknown dependency
function ammKernelModDepAreKnown {
	typeset kmod="$1"

	typeset mod size refcnt deps _junk
	while read mod size refcnt deps _junk; do
		# Filter on requested kmod
		[[ "$mod" == "$kmod" ]] || continue

		# No module dependency is the "-"
		[[ "$deps" == "-" ]] && [[ "$refcnt" == "0" ]] && return 0
		# remove unwanted -
		deps="${deps//-/}"
		deps="${deps//,/ }"

		# All refcount are modules
		if [[ "$(ammStringCountWords $deps)" == "$refcnt" ]]; then
			ammLogDbg "Module '$kmod' has '$(ammStringCountWords $deps)' dependant modules for '$refcnt' ref counter"
			#ammLogDbg 
			return 0
		fi
	done < /proc/modules

	return 1
}


function ammKernelModIsLoaded {
	typeset kmod="$1"

	typeset mod _junk
	while read mod _junk; do
		[[ "$mod" == "$kmod" ]] && return 0
	done < /proc/modules
	return 1
}

function ammKernelModUnload {

	typeset ret=0 modlist=""

	# Pass 1: create module dependency listing and check we can rmmod them all
	typeset mod
	for mod in "$@"; do
	# for mod in $(ammKernelModList "$@"); do
		# Skip missing or already unloaded module
		! ammKernelModIsLoaded "$mod" && continue

		# check if we have unknown ref for this module (show stopper)
		if ! ammKernelModDepAreKnown "$mod"; then
			ammLogWrn "The module '$mod' has an unknown ref that is not another kmod. Cannot unload"
			ret+=1
			continue
		fi

		typeset dep deps
		deps="$(ammKernelModDepList "$mod")"
		for dep in $deps; do
			if ! ammKernelModDepAreKnown "$dep"; then
				ammLogWrn "Cannot unload mod '$dep', dependency for '$mod'. Skipping"
				ret+=1
				continue
			fi
		done

		modlist+="$deps $mod"
	done

	if [[ $ret -ne 0 ]]; then
		ammLogErr "One or more module cannot be unloaded. Won't start the unloading"
		return $ret
	fi

	# Pass 2: Do the real mod unloading
	for mod in $modlist; do
		# Skip missing or already unloaded module
		! ammKernelModIsLoaded "$mod" && continue
		ammExecLogged \rmmod $mod
	done

	return $ret
}


# -----------------------------------------------------------------------------
# Signature managmeent
# -----------------------------------------------------------------------------


function ammKernelRmmod {

	typeset -i r=0
	typeset -A moddep
	typeset -A matches
	typeset    mod

	# Build our dependency list
	while read name size refcnt deps state address _junk; do
		deps="${deps%,}"
		deps="${deps//,/ }"
		[[ "$deps" == "-" ]] && deps=""

		# Set mod dependencies
		moddep[$name]="${deps:-}"
		typeset modcnt="$(echo ${deps-}|wc -w)"

		# If this module matches
		for mod in "$@"; do
			if [[ $name =~ ^$mod$ ]]; then
				ammLogInf "Module '$name' matched search '$mod' (refcnt:$refcnt modcnt:$modcnt deps:$deps)"
				matches[$name]="$(( $refcnt - $modcnt ))"
			fi
		done
	done < /proc/modules

	# Check is we can unload all found modules
	typeset -i refcnt=0
	for mod in ${!matches[@]}; do
		# If we have remaining refcnt, we can't unload the mod. Display insights
		if [[ ${matches[$mod]} -gt 0 ]]; then
			ammLogErr "Cannot unload module '$mod': refcount is higher than mod dependencies (remains ${matches[$mod]} refs)"
			ammLogErr "Provide here some help for module ...."
			refcnt+=1
		fi
	done

	# Stop here if we can't unload them
	[[ $refcnt -gt 0 ]] && return $refcnt

	# Try to unload dependencies recursively
	for mod in ${!matches[@]}; do
		if ! ammKernelRmmod ${moddep[$mod]}; then
			ammLogErr "Cannot unload dependencies for module '$mod'. Stopping"
			return 1
		fi
	done

	# try to unload the modules
	for mod in ${!matches[@]}; do
		ammLogInf "rmmod of $mod"
		#/sbin/rmmod $mod || {
		echo "rmmod $mod" || {
			ammLogErr "Cannot remove module '$mod'. Are you root ?"
			return 1
		}
	done

}


