# vim: ft=sh ts=4

if ! [[ "${FUNCNAME[1]}" = ammLib::Load* ]]; then
	echo >&2 "You must not source this library ($BASH_SOURCE): Use function ammLib::Load"
	exit 1
fi

# -----------------------------------------------------------------------------
# AMM Lib meta stubs
# -----------------------------------------------------------------------------

# Var definition
typeset -ga AMMCONFIG_SEARCHDIR
typeset -gA __AMMCONFIG_VARS_DECL __AMMCONFIG_VARS_DESC
typeset -gA __AMMCONFIG_VARS_TYPE __AMMCONFIG_VARS_LIST
typeset -ga __AMMCONFIG_FILTER_NAME __AMMCONFIG_FILTER_FILE

#function ammConfig::MetaCheck {
#	ammExec::Require awk
#}
function ammConfig::MetaInit {

	ammLib::Require "string"

	#typeset -ga AMMCONFIG_SEARCHDIR=(
	AMMCONFIG_SEARCHDIR=(
		"/etc/ammlib/conf"
		"$__AMMLIB_REALPATH/conf/"
		"$HOME/.ammlib/conf"
	)


	ammLib::HookRegister "before:optparse:parse" "_ammConfig::HookOptparseAddOpt"
	ammLib::HookRegister "after:optparse:parse" "_ammConfig::HookOptparse"
}

# -----------------------------------------------------------------------------
# Caller helpers
# -----------------------------------------------------------------------------
function _ammConfig::HookOptparseAddOpt {
	ammOptparse::AddOptGroup "mod:config" "Configuration Options"
	ammOptparse::AddOpt "--config-list!"        "List configuration fields"           "false"
	ammOptparse::AddOpt "--config-generate!"    "Generate configuration and exit"     "false"
	ammOptparse::AddOpt "--config-filter-name@" "Filter listed/generated vars on their name"
	ammOptparse::AddOpt "--config-filter-file@" "Filter listed/generated vars on their declared file"
	ammOptparse::AddOpt "--config-dir-add@"  "Extra search-dir for configuration"

}

function _ammConfig::HookOptparse {
	__AMMCONFIG_FILTER_NAME=$(ammOptparse::Get "config-filter-name")
	__AMMCONFIG_FILTER_FILE=$(ammOptparse::Get "config-filter-file")

	typeset -a paths=$(ammOptparse::Get "config-dir-add")
	typeset p
	for p in "${paths[@]}"; do
		:
	done

	if ammString::IsTrue $(ammOptparse::Get "config-list"); then
		#ammConfig::
		:
	elif ammString::IsTrue $(ammOptparse::Get "config-generate"); then
		ammConfig::FileTemplate
		exit 0
	fi
}

function _ammConfig::GetCaller {

	typeset -i nfiles="${#BASH_SOURCE[@]}" i
	for (( i=$(($nfiles-1)); i>=0; i--)); do
		typeset file="${BASH_SOURCE[$i]##*/}"
		if [[ "$file" != "${BASH_SOURCE[0]##*/}" ]]; then
			echo "$file"
			break
		fi
	done
}

# -----------------------------------------------------------------------------
# Configuration file
# -----------------------------------------------------------------------------

function _ammConfig::FileFind {
	typeset filename="$1"
	typeset mode="${2:-all}"

	typeset -a files
	typeset filepath
	for filepath in "${AMMCONFIG_SEARCHDIR[@]}"; do
		typeset filetest="$filepath/$filename.conf"
		if [[ -e "$filetest" ]]; then
			ammLog::Debug "Found file '$filetest' for '$filename'"
			files+=("$filetest")
		else
			ammLog::Debug "Tried '$filetest' for '$filename' but not found"
		fi
	done

	if [[ "$mode" == "all" ]]; then
		echo "${files+${files[@]}}"
	elif [[ "$mode" == "latest" ]]; then
		echo "${files+${files[-1]}}"
	else
		ammLog::Error "Unknown mode '$mode'"
	fi
}

# @description check if a file is valid

function _ammConfig::FileValidate {
	typeset file="$1"

	# Snapshot the vars
	typeset caller="$(_ammConfig::GetCaller)"
	typeset tmpdiff="$(ammLib::TmpPathGet "cfg_$caller")"
	set >| "$tmpdiff/before"
	(
		# Try to load, safely
		if ! PATH= source "$file"; then
			ammLog::Error "Unable to source configuration file '$file'"
			return 1
		fi

		# Ensure no extra vars was modified
		set >| "$tmpdiff/after"
		typeset d
		while read d; do
			case $d in
				# File words, don't care
				---|+++|@@)
					;;
				# Removal, often a change of an existing var
				-*)
					typeset v="${d#-}"
					v="${v%%=*}"
					case $v in
						# These vars are auto-generated by bash and should be ignored
						_) ;;

						# Check the modified vars are in the prefix of the caller
						*)
							;;
					esac
					;;
				+*)
					;;
			esac
		done < <(\diff -u0 "$tmpdiff/before" "$tmpdiff/after")
	)
}

# @description  Add a custom search path to the folder list
function ammConfig::FilePathAdd {

	AMMCONFIG_SEARCHDIR+=("$@")
}


function ammConfig::FileGetName {
	typeset filepart="${1:-}"

	# If the caller is one of our module, clean it
	typeset modname="$(_ammConfig::GetCaller)"
	if [[ "${modname%.lib}" != "$modname" ]]; then
		modname="${modname%.lib}"
		modname="${modname//.//}"
	fi

	# Prepend the module name
	echo "$modname${filepart:+/$filepart}"
}

# @description  Load a file
# @arg  $1 (string)  Filename to load
function ammConfig::FileLoad {
	typeset filename="${1:-}"

	filename="$(ammConfig::FileGetName "$filename")"

	typeset file
	for file in $(_ammConfig::FileFind "$filename"); do
		# Check file validity
		if ! _ammConfig::FileValidate "$file"; then
			ammLog::Warning "Config file '$file' is not valid. Skipping"
			continue
		fi

		ammLog::Debug "Loading configuration for '$filename' from '$file'"
	done
}

# @description  Save the current state to a configuration file
# @arg $1  (string) Name of the file
# @arg $@  (string) variables names to store (previously declared)
function ammConfig::FileSave {
	typeset filename="$1"

	typeset pfx
	for pfx in "$@"; do
		ammEnv::VarExport "$pfx" >> "$filename"
	done
}


# @description  Generate a configuration file with all available vars
# @arg  $@  (string) Files to export variables from (overrides __AMMCONFIG_FILTER_FILE)
function ammConfig::FileTemplate {
	
	typeset -a srclist=("$@")
	if ( set +u; [[ -z "${srclist[@]}" ]] ); then
		if [[ -n "${__AMMCONFIG_FILTER_FILE[@]}" ]]; then
			srclist=("${__AMMCONFIG_FILTER_FILE[@]}")
		else
			srclist=("${!__AMMCONFIG_VARS_LIST[@]}")
		fi
	fi

	# Loop on all requested registering files
	typeset src
	for src in ${srclist[@]}; do

		echo "#"
		echo "# Variables set from $src"
		echo "#"
		echo

		# Export the variable with some details and metadata
		typeset varname line
		for varname in ${__AMMCONFIG_VARS_LIST[$src]}; do
			echo "# (${__AMMCONFIG_VARS_TYPE[$varname]} @ ${__AMMCONFIG_VARS_DECL[$varname]}) ${__AMMCONFIG_VARS_DESC[$varname]}"
			ammEnv::VarExport "$varname" | while read line; do
				echo "#$line"
			done
			echo
		done
	done

}

# -----------------------------------------------------------------------------
# Variable usage
# -----------------------------------------------------------------------------
function ammConfig::VarDeclare {
	typeset name="$1"
	typeset format="${2:-string}"
	typeset desc="${3:-}"

	# If var is already declared...
	if (set +u; [[ -n "${__AMMCONFIG_VARS_DECL[$name]}" ]] ); then
		ammLog::Warning "Variable '$name' is already declared at ${__AMMCONFIG_VARS_DECL[$name]}"
		return 0
	fi

	# Define variable and metadata
	__AMMCONFIG_VARS_DECL[$name]="$(ammLog::Stackdump 2 1)"
	__AMMCONFIG_VARS_LIST[$(_ammConfig::GetCaller)]+="$name "
	__AMMCONFIG_VARS_TYPE[$name]="$format"
	__AMMCONFIG_VARS_DESC[$name]="$desc"


	typeset vardecl="-g"
	case "$format" in
		array)     vardecl+="a" ;;
		assoc)     vardecl+="A" ;;
		string)    ;;
		integer)   vardecl+="i" ;;
		lowercase) vardecl+="l" ;;
		uppercase) vardecl+="u" ;;
		*)
			ammLog::Error "Invalid format '$format' for '$name'. Must be one of: array assoc string integer"
			return 1
			;;
	esac

	# define the var now if not already
	eval "[[ -n \"\${$name:-}\" ]] || typeset $vardecl $name="

}

function ammConfig::VarAllowOverride {
	typeset name="$1"

	# TODO: wildcards
	if [[ "${name//\*/}" != "$name" ]]; then
		ammLog::Warning "Wildcard is not yet implemented"
		return 1
	# Check if var is defined
	elif ! (set +u; [[ -n "${__AMMCONFIG_VARS_TYPE[$name]}" ]] ); then
		ammLog::Error "Cannot allow undefined variable '$name'"
		return 1
	fi
}

