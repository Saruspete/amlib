# vim: ft=sh ts=4

if ! [[ "${FUNCNAME[1]}" = ammLib::Load* ]]; then
	echo >&2 "You must not source this library ($BASH_SOURCE): Use function ammLib::Load"
	exit 1
fi

# -----------------------------------------------------------------------------
# AMM Lib meta stubs
# -----------------------------------------------------------------------------

function ammHttp::MetaCheck {
	ammExec::RequireOne curl wget
}

function ammHttp::MetaInit {
	ammLib::Load "string"

	typeset -g  _AMMHTTP_CURL_VERSION=
	if ammExec::Exists "curl"; then
		_AMMHTTP_CURL_VERSION="$(\curl -V|ammString::Filter - '^curl' '' 2)"
		ammLog::Debug "Found curl version '$_AMMHTTP_CURL_VERSION'"
	fi

	typeset -g  _AMMHTTP_WGET_VERSION=
	if ammExec::Exists "wget"; then
		_AMMHTTP_WGET_VERSION="$(\wget -V|ammString::Filter - '^GNU Wget' '' 3)"
		ammLog::Debug "Found wget version '$_AMMHTTP_WGET_VERSION'"
	fi

	typeset -g _AMMHTTP_AGENT_FORCE=

}

# -----------------------------------------------------------------------------
# Internal wrappers for tools
# -----------------------------------------------------------------------------

function ammHttp::_DoQuery {
	typeset opts="$1"

	# User-specified agent, forcefully
	if [[ -n "${_AMMHTTP_AGENT_FORCE:-}" ]]; then
		# TODO: warning: executing a user-provided variable. Might be security risk
		if ammEnv::IsFunc "$_AMMHTTP_AGENT_FORCE" || ammExec::Exists "$_AMMHTTP_AGENT_FORCE"; then
			$AMMHTTP_AGENT_FORCE "$@"
		else
			ammLog::Warning "Invalid value in AMMHTTP_AGENT_FORCE: '$AMMHTTP_AGENT_FORCE'"
		fi
	fi

	# Last, use first available
	if [[ -n "${_AMMHTTP_CURL_VERSION:-}" ]]; then
		ammHttp::_DoCurl "$@"
		return $?
	elif [[ -n "${_AMMHTTP_WGET_VERSION}" ]]; then
		ammHttp::_DoWget "$@"
		return $?
	else
		ammLog::Error "Unable to select the target agent..."
		return 1
	fi
}


# @description  Parse incoming options and remove
function ammHttp::_OptParse {

	typeset opt
	for opt in "$@"; do
		[[ "${opt:0:1}" == "-" ]] && continue
		echo "$opt"
	done
}

function ammHttp::_DoCurl {
	typeset opts="${1:-}"
	shift 1

	typeset path="${1%%\?*}"
	typeset data="${1#*\?}"
	typeset request="GET"

	# Options parsing
	typeset curlopts="" opt=
	for opt in $(ammHttp::_OptParse ${opts:-}); do
		typeset val="${opt#*=}"
		case $opt in
			# HEAD
			head)        request="HEAD"
			             curlopts+=" --head " ;;
			# PUT
			put)         request="PUT"  ;;
			put-file=*)  request="PUT"
			             curlopts+=" --upload-file '$val' " ;;
			put-form=*)  request="PUT"
			             curlopts+=" --form '$val' " ;;
			# POST
			post)        request="POST" ;;
			post-file=*) request="POST"
			             curlotps+=" --data-binary '@$val' " ;;
			post-form=*) request="POST"
			             curlopts+=" --form $val " ;;
			# Query modifiers
			json)        curlopts+=" --header 'Content-Type: application/x-www-form-urlencoded' ";;
			follow)      curlopts+=" --location " ;;
			nofollow)    curlopts="${curlopts// --location / /}"
			             curlopts="${curlopts// -L / /}" ;;
			agent=*)     curlopts+=" --user-agent '$val' " ;;

			# Local modifiers
			silent)      curlopts+=" --silent --show-error " ;;
			dest=*)      curlopts+=" --output $val --create-dirs " ;;
			destdir=*)   curlopts+=" --output-dir $val --create-dirs " ;;
			cookiejar=*) curlopts+=" --cookie-jar $val " ;;
			# curl specific options
			parallel)    curlopts+=" -Z" ;;
			*) ammLog::Error "Unknown option: $opt" ;;
		esac
	done

	# Do the query for every url provided
	typeset -i ret=0
	\curl --request "$request" $curlopts -f --connect-timeout 10 "$@" 2>/dev/null
	ret+=$?

	return $ret
}

function ammHttp::_DoWget {
	typeset opts="${1:-}"
	shift 1

	# Options parsing
	typeset wgetopts=""
	for o in ${opts:-}; do
		typeset val="${opt#*=}"
		case $o in
			follow) ;;
			nofollow)    wgetopts+=" --max-redirect=0 " ;;
			silent)      wgetopts+=" --quiet " ;;
			agent=*)     wgetopts+=" --user-agent='$val' " ;;
			destdir=*)   wgetopts+=" --directory-prefix='$val' "  ;;
			cookiejar=*) wgetopts+=" --load-cookies='$val' --save-cookies='$val' --keep-session-cookies " ;;
			# wget specific options
			recursive)   wgetopts+=" -r -np -e robots=off --wait 0.1 " ;;
			*) log_err "Unknown fetch_http option: $o" ;;
		esac
		shift
	done

	# Do the query for every url provided
	typeset -i ret=0
	\wget $wgetopts --no-clobber "$@" 2>/dev/null
	ret=$?


	return $ret
}

# -----------------------------------------------------------------------------
# Generic HTTP features
# -----------------------------------------------------------------------------

# @description  Do a single HTTP GET request
function ammHttp::Get {
	typeset url="$1"
	typeset opts="${2:-follow}"

	ammHttp::_DoQuery "$opts" "$url"

}

function ammHttp::Post {
	typeset url="$1"
	typeset data="$2"
	typeset opts="${3:-follow}"

	# File upload ?
	if [[ -s "$data" ]]; then
		opts+=" post-file=$data"

	# JSON ?
	elif [[ "${data:0:1}" == "{" ]]; then
		opts+=" post-data='$data' json"
	
	# Simple form
	else
		opts+=" post-data='$data'"
	fi

	ammHttp::_DoQuery "$opts" "$url"
}

# @description  Fetch an url
# @arg $1 
# @arg $2 (path)  Directory
# @arg $3 (string) Options to change function behavir. Default: "follow silent"
#   follow: Follow redirections
#   nofollow: Don't follow redirections
#   silent: Don't show messages, only errors
function ammHttp::Fetch {
	typeset src="$1"
	typeset dst="$2"
	typeset opts="${3:-follow}"

	[[ "$dst" != "-" ]] && opts+=" silent"

	ammHttp::Get "$src" "$opts dest=$dst"
}

function ammHttp::FetchSmart {
	typeset src="$1"
	typeset dst="${2:-$__AMMLIB_DATATMP/${src##*/}}"
	typeset opt="${3:-}"
	typeset ret=0


	# git: URL ends with .git  or start as git://
	if [[ $src =~ ^git:// ]] || [[ $src =~ .+\.git$ ]]; then
		if is_binary "git"; then
			(
				mkdir -p "$dst"
				cd "$dst"
				git clone "$src" .
			)
			ret=$?
		else
			log_err "Cannot find git"
			ret=99
		fi

	# scp: host:path
	elif [[ $src =~ ^[a-zA-Z0-9_\-\.]+:.+$ ]]; then
		ammLog::Warning "scp not yet implemented"
		ret=99

	# RSYNC
	elif [[ $src =~ ^rsync:// ]]; then
		if ammExec::Exists "rsync"; then
			rsync -a "$src" "$dst"
			ret=$?
		else
			ammLog::Error "Cannot find rsync"
			ret=99
		fi

	# HTTP: curl or wget
	elif [[ $src =~ ^https?:// ]]; then

		ammHttp::Fetch "$src" "$dst" "$opt"
		ret=$?

	# Local file: "./"
	elif [[ -e "$(readlink -f $src)" ]]; then
		ammLog::Info "Fetching '$src' with cp"
		cp -r "$src" "$dst"
		ret=$?
	else
		ammLog::Error "Unable to process url '$src'"
		ret=99
	fi

	echo "$dst"
	return $ret
}


function ammHttp::Push {
	typeset url="$1"
	typeset file="$2"
	typeset opts="${3:-}"

	# Allowed options


	if ammExec::Exists "curl"; then
		typeset opt val curlopts=
		for opt in ${opts:-}; do
			val="${opt#*=}"
			case "$opt" in
				certcafile=*)  curlopts+=" --cacert $val" ;;
				certcadir=*)   curlopts+=" --capath $val" ;;
				certclient=*)  curlopts+=" --cert   $val" ;;
				certcrl=*)     curlopts+=" --crlfile $val" ;;
			esac
		done

		\curl $curlopts --data-binary "@$file"  "$url" 2>/dev/null
		return $?

	elif ammExec::Exists "wget"; then
		:
	fi
}


# -----------------------------------------------------------------------------
# Special sites (to be split into submodule ?
# -----------------------------------------------------------------------------

# TODO: use tools like jq to parse json APIs and use private keys

#
# Github
#

function ammHttp::GithubBranchGetLastCommit {
	typeset projectpath="$1"
	typeset branch="${2:-master}"

	# Get the atom feed, and grep the related tag...
	typeset url="https://github.com/$projectpath/commits/${branch}.atom"
	typeset out="$(ammHttp::Get "$url" "-")"
	typeset commitid="${out#*<id>tag:github.com,2008:Grit::Commit/}"
	commitid="${commitid%%</id>*}"
	typeset commitdate="${out#*<updated>}"
	commitdate="${commitdate%%</updated>*}"

	echo "$commitdate $commitid"
	[[ -n "$commitdate" ]]
}

function ammHttp::GithubCommitExists {
	typeset projectpath="$1"
	typeset commit="$2"

	typeset url="https://github.com/$projectpath/commit/$commit"
	[[ "$(ammHttp::Get "$url" "-" 2>/dev/null)" != "Not Found" ]]
}

function ammHttp::GithubArchiveGetUrl {
	typeset projectpath="$1"
	typeset commit="$2"

	typeset url="https://github.com/$projectpath/archive/$commit.tar.gz"
	echo "$url"
}

function ammHttp::GithubReleaseGetLastVersion {
	typeset projectpath="$1"
	typeset tag="${2:-latest}"

	# Try with the simple http
	typeset url="https://github.com/$projectpath/releases/$tag"
	typeset out="$(ammHttp::Get "$url" "-" "nofollow")"
	# curl will output the html with new location href
	# wget will show the redirect url
	typeset vers="$(echo "$out"| grep -Po 'releases/tag/.+[" ]' | cut -d/ -f 3 | tr -d '"')"

	# If a version was tagged latest, use it and stop
	if [[ -n "$vers" ]]; then
		echo "$vers"
		return 0
	fi

	# If latest tag is not set, fetch the latest release

	# Test from atom feed
	url="https://github.com/$projectpath/releases.atom"
	out="$(ammHttp::Get "$url" "-")"
	typeset vers="${out#*<id>tag:github.com,2008:Repository/*/}"
	if [[ "$vers" != "$out" ]]; then
		vers="${vers%%</id*}"
		echo "$vers"
		return 0
	fi

	# Else, test with api
	url="https://api.github.com/repos/$projectpath/releases"
	out="$(ammHttp::Get "$url" "-")"
	if ammExec::Exists jq; then
		vers="$(echo "$out" | jq '.[0].tag_name')"
		vers="${vers//\"/}"
		echo "$vers"
		return 0
	else
		vers="$(echo "$out" | awk '$1=="\"tag_name\":" {gsub(/[,"]/,"",$NF); print $NF; exit}')"
		echo "$vers"
		return 0
	fi

	return 1
}

function ammHttp::GithubReleaseGetAssets {
	typeset projectpath="$1"
	typeset tag="$2"
	typeset assetfilter="${3:-}"

	typeset url="https://api.github.com/repos/$projectpath/releases/tags/$tag"
	typeset out="$(ammHttp::Get "$url" "-")"
	typeset urls=""

	#
	if ammExec::Exists "jq"; then
		urls="$(echo "$out" | jq '.assets[].browser_download_url')"
		urls="${urls//\"/}"
	else
		urls="$(echo "$out" | awk '$1=="\"browser_download_url\":" {print $2}')"
		urls="${urls//\"/}"
	fi

	echo "$urls"
	[[ -n "$urls" ]]
}

# Compat
function ammHttp::GithubBranchGet {
	ammLog::Deprecated "ammHttp::GithubBranchGetLastCommit" "$@"
}
function ammHttp::GithubReleaseGet {
	ammLog::Deprecated "ammHttp::GithubReleaseGetLastVersion" "$@"
}


#
# cgit
#
function ammHttp::CGitTagGet {
	typeset urlrepo="$1"

	typeset url="$urlrepo/refs/tags"

	typeset line
	while read line; do
		ammLog::Debug "Testing line '$line'"
		if [[ $line =~ /.+/tag/\?h=([-_\.0-9a-zA-Z]+)\'\> ]]; then
			echo "${BASH_REMATCH[1]}"
		fi
	done < <(ammHttp::Get "$url" "-")


}
