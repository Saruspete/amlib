# vim: ft=sh ts=4

if ! [[ "${FUNCNAME[1]}" = ammLib::Load* ]]; then
	echo >&2 "You must not source this library ($BASH_SOURCE): Use function ammLib::Load"
	exit 1
fi

# -----------------------------------------------------------------------------
# AMM Lib meta stubs
# -----------------------------------------------------------------------------

function ammHttp::MetaCheck {
	ammExec::RequireOne curl wget

}

# -----------------------------------------------------------------------------
# Generic HTTP features
# -----------------------------------------------------------------------------

# @description  Fetch an url
# @arg $1 
# @arg $2 (path)  Directory
# @arg $3 (string) Options to change function behavir. Default: "follow silent"
#   follow: Follow redirections
#   nofollow: Don't follow redirections
#   silent: Don't show messages, only errors
function ammHttp::Fetch {
	typeset src="$1"
	typeset dst="$2"
	typeset opts="${3:-follow silent}"

	#
	# Curl
	#
	if ammExec::Exists "curl"; then
		# TODO: Manage the proxy creds
		ammLog::Inf "Fetching '$src' with curl"

		# Process special parameters
		typeset curlopts=""
		for o in ${opts:-}; do
			case $o in
				follow) curlopts+=" -L" ;;
				nofollow) curlopts="${curlopts// -L/ /}" ;;
				silent) curlopts+=" " ;;
				*) ammLog::Err "Unknown option: $o" ;;
			esac
			shift
		done

		# Do the query
		\curl $curlopts -sS -f --connect-timeout 10 -o "$dst" "$src" 2>/dev/null
		ret=$?
		return $ret

	#
	# wget
	#
	elif ammExec::Exists "wget"; then
		ammLog::Inf "Fetching '$src' with wget"

		# Process special parameters
		typeset wgetopts=""
		for o in ${opts:-}; do
			case $o in
				follow) ;;
				nofollow) wgetopts+=" --max-redirect=0" ;;
				silent) wgetopts+=" -sS" ;;
				recursive) wgetopts+=" -r -np -e robots=off --wait 0.1" ;;
				*) log_err "Unknown fetch_http option: $o" ;;
			esac
			shift
		done

		# Do the fetch
		\wget 2>&1 $wgetopts -O "$dst" "$src"
		ret=$?
		return $ret

	else
		ammLog::Err "Unable to find curl not wget for fetch_http"
		return 99
	fi
}

function ammHttp::FetchSmart {
	typeset src="$1"
	typeset dst="${2:-$__AMMLIB_DATATMP/${src##*/}}"
	typeset opt="${3:-}"
	typeset ret=0


	# git: URL ends with .git  or start as git://
	if [[ $src =~ ^git:// ]] || [[ $src =~ .+\.git$ ]]; then
		if is_binary "git"; then
			(
				mkdir -p "$dst"
				cd "$dst"
				git clone "$src" .
			)
			ret=$?
		else
			log_err "Cannot find git"
			ret=99
		fi

	# scp: host:path
	elif [[ $src =~ ^[a-zA-Z0-9_\-\.]+:.+$ ]]; then
		ammLog::Wrn "scp not yet implemented"
		ret=99

	# RSYNC
	elif [[ $src =~ ^rsync:// ]]; then
		if ammExec::Exists "rsync"; then
			rsync -a "$src" "$dst"
			ret=$?
		else
			ammLog::Err "Cannot find rsync"
			ret=99
		fi

	# HTTP: curl or wget
	elif [[ $src =~ ^https?:// ]]; then

		ammHttp::Fetch "$src" "$dst" "$opt"
		ret=$?

	# Local file: "./"
	elif [[ -e "$(readlink -f $src)" ]]; then
		ammLog::Inf "Fetching '$src' with cp"
		cp -r "$src" "$dst"
		ret=$?
	else
		ammLog::Err "Unable to process url '$src'"
		ret=99
	fi

	echo "$dst"
	return $ret
}


function ammHttp::Push {
	typeset url="$1"
	typeset file="$2"
	typeset opts="${3:-}"

	# Allowed options


	if ammExec::Exists "curl"; then
		typeset opt val curlopts=
		for opt in ${opts:-}; do
			val="${opt#*=}"
			case "$opt" in
				certcafile=*)  curlopts+=" --cacert $val" ;;
				certcadir=*)   curlopts+=" --capath $val" ;;
				certclient=*)  curlopts+=" --cert   $val" ;;
				certcrl=*)     curlopts+=" --crlfile $val" ;;
			esac
		done

		curl $curlopts --data-binary "@$file"  "$url"

	elif ammExec::Exists "wget"; then
		:
	fi
}


# -----------------------------------------------------------------------------
# Special sites (to be split into submodule ?
# -----------------------------------------------------------------------------

# TODO: use tools like jq to parse json APIs and use private keys

function ammHttp::GithubBranchGetLastCommit {
	typeset projectpath="$1"
	typeset branch="${2:-master}"

	# Get the atom feed, and grep the related tag...
	typeset url="https://github.com/$projectpath/commits/${branch}.atom"
	typeset out="$(ammHttp::Fetch "$url" "-")"
	typeset commitid="${out#*<id>tag:github.com,2008:Grit::Commit/}"
	commitid="${commitid%%</id>*}"
	typeset commitdate="${out#*<updated>}"
	commitdate="${commitdate%%</updated>*}"

	echo "$commitdate $commitid"
	[[ -n "$commitdate" ]]
}

function ammHttp::GithubCommitExists {
	typeset projectpath="$1"
	typeset commit="$2"

	typeset url="https://github.com/$projectpath/commit/$commit"
	[[ "$(ammHttp::Fetch "$url" "-" 2>/dev/null)" != "Not Found" ]]
}

function ammHttp::GithubArchiveGetUrl {
	typeset projectpath="$1"
	typeset commit="$2"

	typeset url="https://github.com/$projectpath/archive/$commit.tar.gz"
	echo "$url"
}

function ammHttp::GithubReleaseGetLastVersion {
	typeset projectpath="$1"
	typeset tag="${2:-latest}"

	# Try with the simple http
	typeset url="https://github.com/$projectpath/releases/$tag"
	typeset out="$(ammHttp::Fetch "$url" "-" "nofollow")"
	# curl will output the html with new location href
	# wget will show the redirect url
	typeset vers="$(echo "$out"| grep -Po 'releases/tag/.+[" ]' | cut -d/ -f 3 | tr -d '"')"

	# If a version was tagged latest, use it and stop
	if [[ -n "$vers" ]]; then
		echo "$vers"
		return 0
	fi

	# If latest tag is not set, fetch the latest release

	# Test from atom feed
	url="https://github.com/$projectpath/releases.atom"
	out="$(ammHttp::Fetch "$url" "-")"
	typeset vers="${out#*<id>tag:github.com,2008:Repository/*/}"
	if [[ "$vers" != "$out" ]]; then
		vers="${vers%%</id*}"
		echo "$vers"
		return 0
	fi

	# Else, test with api
	url="https://api.github.com/repos/$projectpath/releases"
	out="$(ammHttp::Fetch "$url" "-")"
	if ammExec::Exists jq; then
		vers="$(echo "$out" | jq '.[0].tag_name')"
		vers="${vers//\"/}"
		echo "$vers"
		return 0
	else
		vers="$(echo "$out" | awk '$1=="\"tag_name\":" {gsub(/[,"]/,"",$NF); print $NF; exit}')"
		echo "$vers"
		return 0
	fi

	return 1
}

function ammHttp::GithubReleaseGetAssets {
	typeset projectpath="$1"
	typeset tag="$2"
	typeset assetfilter="${3:-}"

	typeset url="https://api.github.com/repos/$projectpath/releases/tags/$tag"
	typeset out="$(ammHttp::Fetch "$url" "-")"
	typeset urls=""

	#
	if ammExec::Exists "jq"; then
		urls="$(echo "$out" | jq '.assets[].browser_download_url')"
		urls="${urls//\"/}"
	else
		urls="$(echo "$out" | awk '$1=="\"browser_download_url\":" {print $2}')"
		urls="${urls//\"/}"
	fi

	echo "$urls"
	[[ -n "$urls" ]]
}

# Compat
function ammHttp::GithubBranchGet {
	ammLog::Deprecated "ammHttp::GithubBranchGetLastCommit"
	ammHttp::GithubBranchGetLastCommit "$@"
}
function ammHttp::GithubReleaseGet {
	ammLog::Deprecated "ammHttp::GithubReleaseGetLastVersion"
	ammHttp::GithubReleaseGetLastVersion "$@"
}
