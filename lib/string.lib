# vim: ft=sh ts=4

if ! [[ "${FUNCNAME[1]}" = ammLib::Load* ]]; then
	echo >&2 "You must not source this library ($BASH_SOURCE): Use function ammLib::Load"
	exit 1
fi

function ammString::MetaCheck {
	# try to keep to coreutils
	ammExec::Requires sed seq tr
}

# -----------------------------------------------------------------------------
# Tests of string content, types and values
# -----------------------------------------------------------------------------

function ammString::Contains {
	typeset want="$1"
	typeset check="$2"
	[[ "${check//$want/}" != "$check" ]]
}

function ammString::ContainsWord {
	typeset want="$1"; shift

	# Lazy: just check
	for w in "$@"; do
		[[ "$w" == "$want" ]] && return 0
	done

	return 1
}

function ammString::StartsWith {
	typeset want="$1"
	typeset check="$2"
	[[ "${check#$want}" != "$check" ]]
}

function ammString::EndsWith {
	typeset want="$1"
	typeset check="$2"
	[[ "${check%$want}" != "$check" ]]
}

function ammString::IsFile {
	typeset file="$1"

	[[ -f "$file" ]]
}

# @description: Check if the string is an integer. Optionnaly, check its value
# @arg $1  (string) The string to check if it's an int
# @arg $2  (int) The minimal value of the integer
# @arg $3  (int) The maximal value of the integer
function ammString::IsInteger {
	typeset str="$1"
	typeset min="${2:-}"
	typeset max="${3:-}"

	# R emove leading minus
	str="${str#-}"
	# Remove all numbers. Nothing should be left
	[[ -z "${str//[0-9]/}" ]] || return 1

	[[ -n "$min" ]] && [[ $str -lt $min ]] && return 1
	[[ -n "$max" ]] && [[ $str -gt $max ]] && return 1
	return 0
}

function ammString::IsHex {
	typeset str="$1"

	# If empty string or something not in hex
	#if [[ -z "$str" ]] || [[ $str =~ *[![:xdigit:]]* ]]; then
	if [[ -z "$str" ]] || [[ "$str" != "${str//[a-fA-F0-9]}" ]]; then
		return 1
	fi
	return 0
}

function ammString::IsYes {
	typeset str="$1"
	[[ $str =~ ^[yY][eE]?[sS]?$ ]]
}

function ammString::IsNo {
	typeset str="$1"
	[[ $str =~ ^[nN][oO]?$ ]]
}

function ammString::IsYesNo {
	typeset str="$1"
	ammString::IsYes "$str" || ammString::IsNo "$str"
}

function ammString::IsTrue {
	typeset -l str="$1"

	# Empty is false
	[[ -z "$str" ]] && return 1

	# "no" string
	ammString::IsNo "$str" && return 1
	# 0 value
	ammString::IsInteger "$str" && [[ $str -eq 0 ]] && return 1
	# True
	[[ "$str" == "false" ]] && return 1

	# Any other value is valid
	return 0
}


function ammString::IsIPv4 {
	typeset ip="${1:-}"

	# Should test what is faster: this long & complete regex, or the str processing ?
	# "(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)"
	# Minimum IP format is x.y (empty are 0)
	if [[ $ip =~ ^[0-9]{1,3}\.[0-9]{1,3}(\.[0-9]{1,3})?(\.[0-9]{1,3})?$ ]]; then
		OIFS=$IFS
		IFS='.'
		typeset -a ips=($ip)
		IFS=$OIFS
		# Last simple check on the values
		[[ ${ips[0]} -le 255 ]] && [[ ${ips[1]} -le 255 ]] || return 1
		if ( set +u; [[ -n ${ips[2]} ]] ); then
			[[ ${ips[2]} -le 255 ]] || return 1
		fi
		if ( set +u; [[ -n ${ips[3]} ]] ); then
			[[ ${ips[3]} -le 255 ]] || return 3
		fi
		return 0
	fi
	return 1
}

function ammString::IsIPv6 {
	typeset ip="${1:-}"

	# ::1
	[[ $ip =~ ^([0-9a-fA-F]{0,4}:){1,7}[0-9a-fA-F]{0,4}$ ]]
}

function ammString::IsIP {
	typeset ip="$1"
	ammString::IsIPv4 "$ip" || ammStringIsIPv6 "$ip"
}

# Check if the input looks like an option (starts with - or --)
function ammString::IsOption {
	typeset opt="$1"

	[[ "${opt##--}" != "$opt" ]] || [[ "${opt##-}" != "$opt" ]]
}

function ammString::IsUri {
	typeset uri="$1"

	# from https://tools.ietf.org/html/rfc3986#appendix-B
	#[[ $uri =~ ^(([^:/?#]+):)?(//([^/?#]*))?([^?#]*)(\?([^#]*))?(#(.*))? ]]
	[[ $uri =~ ^(([^:/?#]+):)(//([^/?#]*))([^?#]*)(\?([^#]*))?(#(.*))? ]]
}

function ammString::IsDate {
	typeset date="$1"

	typeset s="[-_/]"
	[[ $date =~ [0-9]{4}$s(0[0-9]|1[012])$s([012][0-9]|3[01]) ]]
}

function ammString::IsTime {
	typeset time="$1"

	[[ $time =~ ([01][0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9])(\.[0-9]{3,9})? ]]
}

function ammString::Type {
	typeset str="$1"

	# Network resources
	if ammString::IsUri "$str"; then
		echo "uri"
	elif ammString::IsIPv4 "$str"; then
		echo "ipv4"
	elif ammString::IsIPv6 "$str"; then
		echo "ipv6"

	# Date / Time
	elif ammString::IsDate "$str"; then
		if ammString::IsTime "$str"; then
			echo "datetime"
		else
			echo "date"
		fi
	elif ammString::IsTime "$str"; then
		echo "time"

	# Files
	elif [[ -f "$str" ]]; then
		echo "file"
	elif [[ -d "$str" ]]; then
		echo "folder"
	elif [[ -L "$str" ]]; then
		echo "symlink"
	else
		echo "string"
	fi
}

# -----------------------------------------------------------------------------
# String modifiers
# -----------------------------------------------------------------------------

function _ammString::Trim {
	typeset str="$1"
	# Protect the / as used by the regex
	typeset chars="${2////\\/}"
	
	echo "$str" | sed -E \
		-e "s/^${chars}+//g" \
		-e "s/${chars}+$//g"
}

function ammString::Trim {
	typeset str="${1:-}"
	typeset trimchars="${2:-[ \t\n]}"

	
	if [[ "$1" == "-" ]]; then
		while read line; do
			_ammString::Trim "$line" "$trimchars"
		done
	else
		_ammString::Trim "$str" "$trimchars"
	fi
}

#function ammString::Capitalize {
function ammString::ToCapital {
	typeset str="${1:-}"

	if [[ "$str" == "-" ]]; then
		while read str; do
			str="${str,,}"
			echo "${str^}"
		done
	else
		str="${str,,}"
		echo "${str^}"
	fi
}

function ammString::ToLower {
	typeset -l str="${1:-}"
	if [[ "$str" == "-" ]]; then
		while read str; do
			echo "$str"
		done
	else
		echo "$str"
	fi

}

function ammString::ToUpper {
	typeset -u str="${1:-}"
	if [[ "$str" == "-" ]]; then
		while read str; do
			echo "$str"
		done
	else
		echo "$str"
	fi
}


# @description  Clean a multi-line cmd (with \ at the end)
#
# @arg $1  (string) The string to extract cmdline from
function ammString::ExtractCmdline {
	typeset str="$1"
	# Inspired from https://www.linuxquestions.org/questions/programming-9/merge-lines-in-a-file-using-sed-191121/
	echo "$str" | grep -Pv '^\s*#' \
	| sed -e :a -e N -Ee 's/\\\s*(#.*)?\n^\s*/ /' -e ta
	# https://www.gnu.org/software/sed/manual/sed.html#Joining-lines
	# | sed -e ':x /\\$/ { N; s/\\\n//g ; bx }'
	# | sed -e ':x /\\$/ { N; s/\\\s*(#.*)?\n^\n//g ; bx }'
}

function ammString::InputToLines {
	typeset input="$1"

	# Read stdin
	if [[ "$input" == "-" ]]; then
		cat

	# Read from file
	elif ammString::IsFile "$input"; then
		cat "$input"

	# Just output input
	else
		echo "$input"
	fi
}


# -----------------------------------------------------------------------------
# Units and base conversion
# -----------------------------------------------------------------------------

function ammString::UnitToPow {
	typeset unitsrc="$1"
	typeset unitdst="${2:-}"

	if [[ "${#unitsrc}" != "1" ]]; then
		ammLog::Err "$FUNCNAME units are single char from SI unit"
	fi

	# For Exa, Zetta, Yotta, don't care about Zepto/Yocto. However, I hope you'll use bc instead of pure bash
	typeset -i pow=0 powdiv=0


	# Defualt output in bytes
	if [[ -n "$unitdst" ]]; then
		powdiv="$($FUNCNAME "$unitdst")"
	fi

	# Units to be used
	typeset units="bkmgtpezy"
	typeset -i i=0
	for (( i=0; i<${#units}; i++ )); do
		typeset -l unitTest="${units:$i:1}"
		typeset -l unitTestSrc="$unitsrc"

		# test if the SI Unit is the same
		if [[ "$unitTestSrc" == "$unitTest" ]]; then
			pow=$i
		fi
	done

	echo "$(( $pow-$powdiv ))"
}

# @description  Convert an unit
function ammString::UnitConvert {
	typeset value="$1"
	typeset unitsrc="${2:-}"
	typeset unitdst="${3:-}"


	typeset -i base=1024 coef=1 mult=1 div=1
	typeset useBc=false powOp="*"
	typeset out=""

	# Compound unit
	typeset basesrc="${unitsrc:(-1)}"
	typeset basedst="${unitdst:(-1)}"

	# If we have a different base...
	if [[ "$basesrc" != "$basedst" ]]; then
		# bit to byte: /8
		if [[ "$basesrc" == "b" ]]; then
			div=8
		# byte to bit: *8
		else
			mult=8
		fi
	fi

	typeset -i pow=$(ammString::UnitToPow "${unitsrc:0:1}" "${unitdst:0:1}" )

	# For very high values, bash will overflow
	if [[ $pow -gt 6 ]]; then
		useBc=true
		ammLog::Dbg "Exponant '$pow' is > 6, using bc for calculation"
	fi

	# Negative power, division
	if [[ $pow -lt 0 ]]; then
		powOp="/"
		pow="$(( $pow * -1 ))"
	fi

	ammLog::Dbg "Converting $unitsrc to $unitdst: $base**$pow * $mult / $div"

	# Using bc for high values
	if $useBc; then
		out="$(echo "$value $powOp $base^$pow * $mult / $div" | bc)"
	# or just plain bash
	else
		out="$(( $value $powOp $base**$pow * $mult / $div))"
	fi

	echo "$out"

	if [[ -z "$out" ]] || [[ "$out" == "0" ]]; then
		return 1
	fi
	return 0
}

function ammString::BaseConvert {
	typeset -i basesrc=$1
	typeset -i basedst=$2
	typeset number=$3

	# Stupid but quick
	if [[ "$basesrc" == "$basedst" ]]; then
		echo $number

#	# (<=64) => 10 # commented as fuck up the vim parsing
#	elif [[ $basedst == 10 ]] && [[ $basesrc -le 64 ]]; then
#		echo $(( $basesrc#$number ))
	# 16 => 10: pure bash
	elif [[ $basesrc -le 16 ]]; then
		# Beware to order of obase/ibase !
		echo "obase=$basedst; ibase=$basesrc; $number" | bc
		return $?
	else
		ammLog::Err "Cannot convert from $basesrc to $basedst"
		return 1
	fi
}

function ammString::HexToDec {
	ammString::BaseConvert 16 10 $1
}
function ammString::DecToHex {
	ammString::BaseConvert 10 16 $1
}

function ammString::IPv4ToHex {
	typeset ipv4str="$1"

	typeset ipset strhex
	for ipset in ${ipv4str//./ }; do
		strhex+="$(ammString::DecToHex $ipset)"
	done

	echo $strhex
}
function ammString::HexToIPv4 {
	typeset strhex="$1"
	if [[ "${#strhex}" != 8 ]]; then
		ammLog::Wrn "Calling $FUNCNAME with arg length != 8"
		return 1
	fi

	typeset i ip4str=""
	for ((i=0; i<8; i+=2)); do
		ip4str+="${ip4str:+.}$(ammString::HexToDec ${strhex:$i:2})"
	done

	echo $ip4str
}

# -----------------------------------------------------------------------------
# Search and filter
# -----------------------------------------------------------------------------
function ammString::Filter {
	typeset filterline="${1:-.+}"
	typeset filtercolumn="${2:-}"
	typeset displaycolumn="${3:-0}"
	typeset file="${4:-}"

	ammLog::Dbg "fl=$filterline fc=$filtercolumn dc=$displaycolumn file=$file"
	awk -v fl="$filterline" -v fc="$filtercolumn" -v dc="$displaycolumn" '
		# Line matching
		match($0, fl) {
			# Seek the column matching
			for (i=1; i<=NF; i++) {
				if (length(fc) && ! match($i, fc))
					continue

				# Display column relative to the finding
				if (substr(dc,0,1) ~ /[+-]/)
					print $( i + dc )
				# Absolute column. Default to the whole line ($0)
				else
					print $dc
				break
			}
		}' "$file" | tr -cd '\t\n [:print:]'
}

# -----------------------------------------------------------------------------
# Counting
# -----------------------------------------------------------------------------
function ammString::CountWords {
	typeset -a arr=($@)
	echo ${#arr[@]}
}

function ammString::CountLines {
	typeset input="$1"

	typeset wcout=""

	if [[ -e "$input" ]]; then
		wcout="$(wc -l $input)"

	else
		wcout="$(echo "$input" | wc -l)"
	fi

	echo ${wcout%% *}
}

# -----------------------------------------------------------------------------
# Sorting
# -----------------------------------------------------------------------------
function ammString::SortWords {
	for w in "$@"; do
		echo "$w"
	done | sort | tr '\n' ' '
}

# -----------------------------------------------------------------------------
# Advanced format parsers
# -----------------------------------------------------------------------------

function ammString::ListExpand {
	typeset    listFull=""
	typeset -i err=0

	# Using a simple indexed array allows final ordering
	typeset -a values

	typeset elem group
	for elem in "$@"; do
		# Split the g1,g2,g3 parts
		for group in ${elem//,/ }; do
			# Split the groups (if any)
			typeset bgn="${group%-*}"
			typeset end="${group#*-}"

			# Some checks
			[[ -z "$bgn" ]] && {
				ammLog::Wrn "List begin element '$bgn' (in group '$group') cannot be empty. Skipping"
				continue
			}
			[[ -z "$end" ]] && {
				ammLog::Wrn "List end element '$end' (in group '$group') cannot be empty. Skipping"
				continue
			}

			! ammString::IsInteger "$bgn" && {
				ammLog::Wrn "List element '$bgn' (in group '$group' in element '$elem') is not an integer. Skipping"
				continue
			}
			! ammString::IsInteger "$end" && {
				ammLog::Wrn "List element '$end' (in group '$group' in element '$elem') is not an integer. Skipping"
				continue
			}

			# Different int values means a group like "start-end"
			if [[ "$bgn" != "$end" ]]; then
				typeset -i i=$bgn

				# We may want begin/end to be in ascending order.. or just swap them
				[[ $bgn -gt $end ]] && {
					i=$end
					end=$bgn
				}

				while [[ $i -lt $end ]]; do
					values[$i]=$i
					i+=1
				done

			# Same, so no group, just the same value
			else
				values[$bgn]=$bgn
			fi
			:
		done
	done

	# Show the final unique listing in a single echo
	echo ${!values[@]}
}

# -----------------------------------------------------------------------------
# Pretty print and display helpers
# -----------------------------------------------------------------------------
function ammString::Repeat {
	typeset -i time="${1:-1}"
	typeset    char="${2:- }"
	seq -s "$char" $(($time+1)) | tr -d '[:digit:]'
}


