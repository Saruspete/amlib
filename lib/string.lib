# vim: ft=sh ts=4

if ! [[ "${FUNCNAME[1]}" = ammLibLoad* ]]; then
	echo >&2 "You must not source this library ($BASH_SOURCE): Use function ammLibLoad"
	exit 1
fi

function ammStringMetaInit {
	# try to keep to coreutils
	ammExecRequires sed seq tr
}

# -----------------------------------------------------------------------------
# Tests of string content, types and values
# -----------------------------------------------------------------------------

function ammStringContains {
	typeset want="$1"
	typeset check="$2"
	[[ "${check//$want/}" != "$check" ]]
}

function ammStringContainsWord {
	typeset want="$1"; shift

	# Lazy: just check
	for w in "$@"; do
		[[ "$w" == "$want" ]] && return 0
	done

	return 1
}

function ammStringStartsWith {
	typeset want="$1"
	typeset check="$2"
	[[ "${check#$want}" != "$check" ]]
}

function ammStringEndsWith {
	typeset want="$1"
	typeset check="$2"
	[[ "${check%$want}" != "$check" ]]
}

function ammStringIsFile {
	typeset file="$1"

	[[ -f "$file" ]]
}

function ammStringIsInteger {
	typeset str="$1"

	# Remove leading minus
	str="${str#-}"
	# Remove all numbers. Nothing should be left
	[[ -z "${str//[0-9]/}" ]]
}

function ammStringIsHex {
	typeset str="$1"

	# If empty string or something not in hex
	#if [[ -z "$str" ]] || [[ $str =~ *[![:xdigit:]]* ]]; then
	if [[ -z "$str" ]] || [[ "$str" != "${str//[a-fA-F0-9]}" ]]; then
		return 1
	fi
	return 0
}

function ammStringIsYes {
	typeset str="$1"
	[[ $str =~ ^[yY][eE]?[sS]?$ ]]
}

function ammStringIsNo {
	typeset str="$1"
	[[ $str =~ ^[nN][oO]?$ ]]
}

function ammStringIsTrue {
	typeset -l str="$1"

	# Empty is false
	[[ -z "$str" ]] && return 1

	# "no" string
	ammStringIsNo "$str" && return 1
	# 0 value
	ammStringIsInteger "$str" && [[ $str -eq 0 ]] && return 1
	# True
	[[ "$str" == "false" ]] && return 1

	# Any other value is valid
	return 0
}


function ammStringIsIPv4 {
	typeset ip="${1:-}"

	# Should test what is faster: this long & complete regex, or the str processing ?
	# "(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)"
	# Minimum IP format is x.y (empty are 0)
	if [[ $ip =~ ^[0-9]{1,3}\.[0-9]{1,3}(\.[0-9]{1,3})?(\.[0-9]{1,3})?$ ]]; then
		OIFS=$IFS
		IFS='.'
		typeset -a ips=($ip)
		IFS=$OIFS
		# Last simple check on the values
		[[ ${ips[0]} -le 255 ]] && [[ ${ips[1]} -le 255 ]] || return 1
		if ( set +u; [[ -n ${ips[2]} ]] ); then
			[[ ${ips[2]} -le 255 ]] || return 1
		fi
		if ( set +u; [[ -n ${ips[3]} ]] ); then
			[[ ${ips[3]} -le 255 ]] || return 3
		fi
		return 0
	fi
	return 1
}

function ammStringIsIPv6 {
	typeset ip="${1:-}"

	# ::1
	if [[ $ip =~ ^([0-9a-fA-F]{0,4}:){1,7}[0-9a-fA-F]{0,4}$ ]]; then
		return 0
	fi
	return 1
}
function ammStringIsIP {
	typeset ip="$1"
	ammStringIsIPv4 "$ip" || ammStringIsIPv6 "$ip"
}


# -----------------------------------------------------------------------------
# String modifiers
# -----------------------------------------------------------------------------

function _ammStringTrim {
	typeset str="$1"
	# Protect the / as used by the regex
	typeset chars="${2////\\/}"
	
	echo "$str" | sed -E \
		-e "s/^${chars}+//g" \
		-e "s/${chars}+$//g"
}

function ammStringTrim {
	typeset str="${1:-}"
	typeset trimchars="${2:-[ \t\n]}"

	
	if [[ "$1" == "-" ]]; then
		while read line; do
			_ammStringTrim "$line" "$trimchars"
		done
	else
		_ammStringTrim "$str" "$trimchars"
	fi
}

#function ammStringCapitalize {
function ammStringToCapital {
	typeset str="${1:-}"

	if [[ "$str" == "-" ]]; then
		while read str; do
			str="${str,,}"
			echo "${str^}"
		done
	else
		str="${str,,}"
		echo "${str^}"
	fi
}

function ammStringToLower {
	typeset -l str="${1:-}"
	if [[ "$str" == "-" ]]; then
		while read str; do
			echo "$str"
		done
	else
		echo "$str"
	fi

}

function ammStringToUpper {
	typeset -u str="${1:-}"
	if [[ "$str" == "-" ]]; then
		while read str; do
			echo "$str"
		done
	else
		echo "$str"
	fi
}


function ammStringNormalize {
	typeset file="$1"
	# Inspired from https://www.linuxquestions.org/questions/programming-9/merge-lines-in-a-file-using-sed-191121/
	grep -Pv '^\s*#' "$file" \
	| sed -e :a -e N -Ee 's/\\\s*(#.*)?\n^\s*/ /' -e ta
	# https://www.gnu.org/software/sed/manual/sed.html#Joining-lines
	# | sed -e ':x /\\$/ { N; s/\\\n//g ; bx }'
	# | sed -e ':x /\\$/ { N; s/\\\s*(#.*)?\n^\n//g ; bx }'
}

function ammStringInputToLines {
	typeset input="$1"

	# Read stdin
	if [[ "$input" == "-" ]]; then
		cat

	# Read from file
	elif ammStringIsFile "$input"; then
		cat "$input"

	# Just output input
	else
		echo "$input"
	fi
}


# -----------------------------------------------------------------------------
# Search and filter
# -----------------------------------------------------------------------------
function ammStringFilter {
	typeset filterline="${1:-.+}"
	typeset filtercolumn="${2:-}"
	typeset displaycolumn="${3:-0}"
	typeset file="${4:-}"

	ammLogDbg "fl=$filterline fc=$filtercolumn dc=$displaycolumn file=$file"
	awk -v fl="$filterline" -v fc="$filtercolumn" -v dc="$displaycolumn" '
		# Line matching
		match($0, fl) {
			# Seek the column matching
			for (i=1; i<=NF; i++) {
				if (length(fc) && ! match($i, fc))
					continue

				# Display column relative to the finding
				if (substr(dc,0,1) ~ /[+-]/)
					print $( i + dc )
				# Absolute column. Default to the whole line ($0)
				else
					print $dc
				break
			}
		}' "$file" | tr -cd '\t\n [:print:]'
}

# -----------------------------------------------------------------------------
# Counting
# -----------------------------------------------------------------------------
function ammStringCountWords {
	typeset -a arr=($@)
	echo ${#arr[@]}
}

function ammStringCountLines {
	typeset input="$1"

	typeset wcout=""

	if [[ -e "$input" ]]; then
		wcout="$(wc -l $input)"

	else
		wcout="$(echo "$input" | wc -l)"
	fi

	echo ${wcout%% *}
}

# -----------------------------------------------------------------------------
# Sorting
# -----------------------------------------------------------------------------
function ammStringSortWords {
	for w in "$@"; do
		echo "$w"
	done | sort | tr '\n' ' '
}

# -----------------------------------------------------------------------------
# Advanced format parsers
# -----------------------------------------------------------------------------

function ammStringListExpand {
	typeset    listFull=""
	typeset -i err=0

	# Using a simple indexed array allows final ordering
	typeset -a values

	typeset elem group
	for elem in "$@"; do
		# Split the g1,g2,g3 parts
		for group in ${elem//,/ }; do
			# Split the groups (if any)
			typeset bgn="${group%-*}"
			typeset end="${group#*-}"

			# Some checks
			[[ -z "$bgn" ]] && {
				ammLogWrn "List begin element '$bgn' (in group '$group') cannot be empty. Skipping"
				continue
			}
			[[ -z "$end" ]] && {
				ammLogWrn "List end element '$end' (in group '$group') cannot be empty. Skipping"
				continue
			}

			! ammStringIsInteger "$bgn" && {
				ammLogWrn "List element '$bgn' (in group '$group' in element '$elem') is not an integer. Skipping"
				continue
			}
			! ammStringIsInteger "$end" && {
				ammLogWrn "List element '$end' (in group '$group' in element '$elem') is not an integer. Skipping"
				continue
			}

			# Different int values means a group like "start-end"
			if [[ "$bgn" != "$end" ]]; then
				typeset -i i=$bgn

				# We may want begin/end to be in ascending order.. or just swap them
				[[ $bgn -gt $end ]] && {
					i=$end
					end=$bgn
				}

				while [[ $i -lt $end ]]; do
					values[$i]=$i
					i+=1
				done

			# Same, so no group, just the same value
			else
				values[$bgn]=$bgn
			fi
			:
		done
	done

	# Show the final unique listing in a single echo
	echo ${!values[@]}
}

# -----------------------------------------------------------------------------
# Pretty print and display helpers
# -----------------------------------------------------------------------------
function ammStringRepeat {
	typeset -i time="${1:-1}"
	typeset    char="${2:- }"
	seq -s "$char" $(($time+1)) | tr -d '[:digit:]'
}


