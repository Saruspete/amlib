# vim: ft=sh ts=4

if ! [[ "${FUNCNAME[1]}" = ammLibLoad* ]]; then
	echo >&2 "You must not source this library ($BASH_SOURCE): Use function ammLibLoad"
	exit 1
fi

# -----------------------------------------------------------------------------
# AMM Lib meta stubs
# -----------------------------------------------------------------------------

function ammBootloaderIsolinuxMetaInit {
	ammLibLoad string

}


typeset -ga __ammBootloaderIsolinuxEntries=()
typeset -g  __ammBootloaderIsolinuxEntriesAppend=""

typeset -gA __ammBootloaderIsolinuxConfig=()
typeset -gA __ammBootloaderIsolinuxConfigAvail=(
	[timeout]="Time in 1/10th of sec to wait for user input"
	[menu_clear]="Clear the screen when exiting the menu"
	[menu_title]="Title to display on the menu"
	[menu_background]="Background image"
	[menu_vshift]="?"
	[menu_rows]="?"
	[menu_margin]="?"
	[menu_helpmsgrow]="?"
	[menu_tabmsgrow]="?"
	[menu_tabmsg]="?"
	# Color related
	[menu_color_border]="Border Area"
	[menu_color_sel]="Selected item"
	[menu_color_unsel]="Unselected menu item"
	[menu_color_title]="Title bar"
	[menu_color_tabmsg]="Press [Tab] message"
	[menu_color_hotsel]="Selected hotkey"
	[menu_color_hotkey]="Unselected hotkey"
	[menu_color_help]="Help text"
	[menu_color_scrollbar]="A scrollbar of some type? Not sure."
	[menu_color_timeout]="?"
	[menu_color_timeout_msg]="?"
	[menu_color_cmdmark]="?"
	[menu_color_cmdline]="?"
)

typeset -gA __ammBootloaderIsolinuxMessage=()

# -----------------------------------------------------------------------------
# Initialize
# -----------------------------------------------------------------------------
function ammBootloaderIsolinuxInit {
	typeset basedir="$1"
	
	typeset dstdir="$basedir/isolinux"

	# Require syslinux toolset
	mkdir -p "$dstdir"

	# Create the file listing, according to isolinux version
	typeset files="isolinux.bin vesamenu.c32 kbdmap.c32 reboot.c32 disk.c32"
	[[ ${__ammBootloaderIsolinuxVersion:0:1} -ge 5 ]] && files+=" libutil.c32 libcom32.c32 ldlinux.c32 linux.c32"

	typeset file
	for file in $files; do
		typeset fpath="$(ammBootloaderIsolinuxFind "$file")"
		if ! [[ -s "$fpath" ]]; then
			ammLogErr "Unable to find required '$file'"
			return 1
		fi

		cp "$fpath" "$dstdir"
	done

	# reset state variables
	__ammBootloaderIsolinuxConfig=()
	__ammBootloaderIsolinuxEntries=()
	__ammBootloaderIsolinuxEntriesAppend=""
}

function _ammBootloaderIsolinuxVarnameClean {
	typeset name="$1"
	echo ${name} | tr -cd '[a-zA-Z0-9_]'
}

function ammBootloaderIsolinuxFind {
	typeset file="$1"
	typeset searchpath="/usr/share/isolinux /usr/share/syslinux"

	# For each requested file
	typeset path
	for path in $searchpath; do
		if [[ -e "$path/$file" ]]; then
			echo "$path/$file"
			return 0
		fi
	done

	return 1
}

typeset -g  __ammBootloaderIsolinuxLocation="$(ammBootloaderIsolinuxFind isolinux.bin)"
#typeset -g  __ammBootloaderIsolinuxVersion="$(awk '/ISOLINUX/{for(i=1;i<=NF; i++){ if($i=="ISOLINUX"){ print $(i+1);} } }' "$__ammBootloaderIsolinuxLocation")"
typeset -g  __ammBootloaderIsolinuxVersion="$(strings "$__ammBootloaderIsolinuxLocation"| ammStringFilter "ISOLINUX" "ISOLINUX" "+1" )"

# -----------------------------------------------------------------------------
# Set configuration values
# -----------------------------------------------------------------------------
function ammBootloaderIsolinuxConfig {
	typeset var="$1"
	typeset val="$2"

	if ! ammStringContainsWord "$var" "${!__ammBootloaderIsolinuxConfigAvail[@]}"; then
		echo "${!__ammBootloaderIsolinuxConfigAvail[@]}"
		ammLogWrn "Unavailable configuration '$var'"
		return 1
	fi

	__ammBootloaderIsolinuxConfig[$var]="$val"
}

function ammBootloaderIsolinuxMessageSet {
	typeset msg="${1:-}"
	typeset key="${2:-display}"
	__ammBootloaderIsolinuxMessage[$key]="$msg"
}

# -----------------------------------------------------------------------------
# Add label and menu content
# -----------------------------------------------------------------------------

#
# Main menu
#
function ammBootloaderIsolinuxEntryAddLabel {
	typeset label="${1:-boot${#__ammBootloaderIsolinuxEntries[@]}}"
	shift

	typeset id="${#__ammBootloaderIsolinuxEntries[@]}"
	__ammBootloaderIsolinuxEntries[$id]="label $label"

	typeset opt
	for opt in "$@"; do
		__ammBootloaderIsolinuxEntriesData[$id]+="  $opt\n"
	done
}

function ammBootloaderIsolinuxEntryAddSeparator {
	typeset label="${1:-boot${#__ammBootloaderIsolinuxEntries[@]}}"

	typeset id="${#__ammBootloaderIsolinuxEntries[@]}"
	__ammBootloaderIsolinuxEntries[$id]="menu separator"
}


#
# Submenu processing (this uses eval to fake multi-dimentional arrays... sorry)
#
function ammBootloaderIsolinuxEntryAddSubmenu {
	typeset name="$1"
	typeset code="$(_ammBootloaderIsolinuxVarnameClean "${name}")"

	typeset id="${#__ammBootloaderIsolinuxEntries[@]}"
	__ammBootloaderIsolinuxEntries[$id]="menu begin ^$name"
	__ammBootloaderIsolinuxEntriesData[$id]+="  menu title $name\n"

	# Dynamic submenus
	eval "typeset -ga __ammBootloaderIsolinuxEntriesSub${code}=()"
	eval "typeset -ga __ammBootloaderIsolinuxEntriesSub${code}Data=()"
}

function ammBootloaderIsolinuxEntryAddSubmenuLabel {
	typeset name="$1"
	typeset code="$(echo ${name} | tr -cd '[a-zA-Z0-9]')"

	eval "typeset id=\"\${#__ammBootloaderIsolinuxEntriesSub${code}[@]}\""
	typeset label="${2:-boot${code}${id}}"

	eval "__ammBootloaderIsolinuxEntriesSub${code}[$id]=\"label $label\""

	typeset opt
	for opt in "$@"; do
		eval "__ammBootloaderIsolinuxEntriesSub${code}Data[$id]+=\"  $opt\n\""
	done
}



# -----------------------------------------------------------------------------
# Initialize
# -----------------------------------------------------------------------------
function ammBootloaderIsolinuxGenerate {
	typeset isolinuxcfg="$1"
	#typeset rootdir="$1"
	#typeset isolinuxcfg="$rootdir/isolinux/isolinux.cfg"
	typeset msgprefix="${isolinuxcfg%/*}msg."

	#
	# Generate isolinux.cfg
	#

	# Default header for isolinux
	cat >| "$isolinuxcfg" <<-EOT
	ui vesamenu.c32
	#default vesamenu.c32
	
	EOT

	#
	# Welcome and F1-F12 messages
	#
	cat >> "$isolinuxcfg" <<-EOT
	
	#
	# Help messages
	#
	EOT
	typeset msgtype
	for msgtype in ${!__ammBootloaderIsolinuxMessage[@]}; do
		typeset msgtext="${__ammBootloaderIsolinuxMessage[$msgtype]}"
		typeset msgfile="$msgprefix.$msgtype"

		echo "$msgtype ${msgfile##*/}" >> "$isolinuxcfg"
		echo "$msgtext" >| "$msgfile"
	done

	#
	# Global configuration
	#
	cat >> "$isolinuxcfg" <<-EOT
	
	#
	# Configuration and design
	#
	EOT
	typeset cfgkey
	for cfgkey in $(ammStringSortWords ${!__ammBootloaderIsolinuxConfig[@]}); do
		typeset cfgval="${__ammBootloaderIsolinuxConfig[$cfgkey]}"
		echo >> "$isolinuxcfg" "${cfgkey//_/ } $cfgval"
	done

	#
	# Genreate the menu content
	#
	cat >> "$isolinuxcfg" <<-EOT
	
	#
	# Menu content
	#
	EOT
	typeset menuentryId
	for menuentryId in ${!__ammBootloaderIsolinuxEntries[@]}; do

		typeset menuentry="${__ammBootloaderIsolinuxEntries[$menuentryId]}"
		typeset menudata="$(set +u; echo "${__ammBootloaderIsolinuxEntriesData[$menuentryId]}")"

		# Set the label for booting
		echo    >> "$isolinuxcfg" "$menuentry"
		echo -e >> "$isolinuxcfg" "$menudata"

		# Special cases with further processing
		case "$menuentry" in
			menu\ begin*)
				typeset submenuname="${menuentry#menu begin}"

				echo >> "$isolinuxcfg" "# Submenu $submenuname"

				# Generate the sub menu
				_ammBootloaderIsolinuxGenerateEntries "$submenuname" >> "$isolinuxcfg"

				# Add usual footer menus
				cat >> "$isolinuxcfg" <<-EOT
				label returntomain
				  menu label Return to ^main menu
				  menu exit

				menu end
				# End Submenu $submenuname

				EOT
				;;
		esac
	done

	#
	# Generate UEFI Grub
	#

}

function _ammBootloaderIsolinuxGenerateEntries {
	typeset subname="$1"
	
	subname="$(_ammBootloaderIsolinuxVarnameClean "${subname}")"

	# Would rather have used 'typeset -n' but not available on old bash4
	# Instead, use eval to create aliases
	eval "typeset -a menuentries=(\"\${__ammBootloaderIsolinuxEntriesSub${subname}[@]}\")"
	eval "typeset -a menudatas=(\"\${__ammBootloaderIsolinuxEntriesSub${subname}Data[@]}\")"

	typeset menuId
	for menuId in ${!menuentries[@]}; do
		typeset menuentry="${menuentries[$menuId]}"
		typeset menudata="$(set +u; echo "${menudatas[$menuId]}")"
		echo    "${menuentry}"
		echo -e "${menudata}"
	done

}

# -----------------------------------------------------------------------------
# Img extraction
# -----------------------------------------------------------------------------

function ammBootloaderIsolinuxExtract {
	typeset srcfile="$1"
	typeset dstdir="$2"

	

}
