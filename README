AMM Common Library

====== Use Case ======

A huge number of scripts are used to do day2day production.
This is an attempt to provide a quality common library, that can be :
- usable in scripts and interactive shells
- modular (easy to extend)
- fast (do not load every unneeded function)
- secure (reduce the risk of typos and undefined behaviour)
- fault-tolerant (protects itself against various env failures)
- debuggable (helps keeping track of variables and their usage)



====== Convention ======

The target shell is bash
The target OS is Linux RHEL 6+

===== Syntax =====

All variables must be declared. To enforce this, the libraries must start with
"set -u" (or equivalent "set -o nounset")

Although using bash, we should avoid "bash-only" keywords (like declare or 
readonly). Thus declaration must be done using "typeset" to help portability
to other shells (dash, ksh, zsh).

===== Tabs and spaces =====

Tabs are kept as tabs. 
When aligning, add tabs to the same level as the parent then align with spaces.



===== Naming =====

The naming convention helps avoiding name collision and typos.

Almost all resources in the library are prefixed by "amm", in a format or another.

==== Functions ====

Functions must be :
- Declared by the "function" keyword (and not suffixed by "()")
- Prefixed by "amm" + the module name
- have a descriptive header in the Doxygen format

Example: Declaring a function "Warn" in file "log.lib" :
  # Logs a warning message
  #
  function ammLogWarn {
      typeset msg="${1:-}"
  }


==== Variables ====

The general shell convention is to write global variables in UPPERCASE and 
local variables (in functions) in lower or CamelCase.

Library's internal global variables must be prefixed by "__AMM" + the module
name in uppercase + "_"
Variables inside a function must be declared to fix their scope locally

Example: For a variable keeping track of logs, set in logs.lib
  typeset __AMMLOGS_LOGLINES=""


==== Executables ====

==== Tests ====

All tests must be done using "[[" operator. 
